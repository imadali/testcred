<?php

/*********************************************************************************
*
* DO NOT MODIFY THIS FILE!
*
* This file is part of KINAMU EvalancheConnector, an enhanced module for Sugar (TM). 
* Sugar (TM) is developed by SugarCRM Inc. (C).
* 
* KINAMU EvalancheConnector is licensed software and may only be used in alignment with the 
* End User License Agreement (EULA) received with this software. This software is copyrighted 
* and may not be further distributed without any written consent of 
* KINAMU Business Solutions GmbH (C).
* 
* KINAMU EvalancheConnector: Copyright (C) 2016 by KINAMU Business Solutions GmbH. All rights reserved.
*
* You can contact KINAMU Business Solutions GmbH via email at office@kinamu.com
*
********************************************************************************/


class SyncToEvalancheApi extends SugarApi { public function registerApiRest() { return array( 'SyncToEvalanche' => array( 'reqType' => 'GET', 'path' => array('K_EvaCampaigns', 'sync_to_Evalanche'), 'pathVars' => array('', ''), 'method' => 'SyncToEvalanche', 'shortHelp' => 'Syncs a target list or a campaign to Evalanche', 'longHelp' => '', ), ); } function SyncToEvalanche($api, $args) { error_reporting(0); $result = $this->action_syncCampaignToEva("ProspectList",true); return json_encode($result); } function action_syncCampaignToEva($sync_type="Campaign",$returnResult=false) { $db = $GLOBALS["db"]; $sugar_config = & $GLOBALS["sugar_config"]; $campaign_id = $_REQUEST["record"]; $query = K_EvaCampaign::create_prospect_list_export_query("'".$_REQUEST["record"]."'",$sync_type,"Contacts"); $res = $db->query($query); $sync_contacts = Array(); $targetgroup_ids = Array(); while($row = $db->fetchByAssoc($res)) { $res2 = $db->query("select k_evalanche_id_c from contacts_cstm where id_c = '".$row["id"]."' and k_evalanche_id_c is not null and k_evalanche_id_c <> ''"); if(!($row2 = $db->fetchByAssoc($res2))) { $sync_contacts[] = $row["id"]; } else { $evalanche_ids = explode(',',$row2["k_evalanche_id_c"]); foreach($evalanche_ids as $evalanche_id) { $targetgroup_ids[] = $evalanche_id; } } } $sync_contacts = array_unique($sync_contacts); require_once('custom/modules/K_EvalancheConnector/plugins/Contacts/Contacts.php'); $_REQUEST['plugin'] = 'Contacts'; $evalancheSyncPlugin = new K_EvalancheConnectorPlugin_Contacts(); $evalancheSyncPlugin->enableLogging = true; $cronjob_started = true; $evalancheSyncPlugin->setLogInstance(); if(count($sync_contacts)>0) { $evalancheSyncPlugin->credaris_136(false, $sync_contacts); $evalancheSyncPlugin->oLog->logMessage(Array('status'=>'I','direction'=>'I','text'=>'Start Synchronize of '.sizeOf($evalancheSyncPlugin->credaris_138) . ' Record(s) from SugarCRM to Evalanche')); $skipped = $evalancheSyncPlugin->credaris_137(); $evalancheSyncPlugin->oLog->logMessage(Array('status'=>'I','direction'=>'I','text'=>(sizeOf($evalancheSyncPlugin->credaris_138)-$skipped) . ' of '. sizeOf($evalancheSyncPlugin->credaris_138).' Record(s) were synchronized to Evalanche successfully')); foreach($sync_contacts as $contact_id) { $res = $db->query("select k_evalanche_id_c from contacts_cstm where id_c IN ('".implode("','",$sync_contacts)."') and k_evalanche_id_c is not null and k_evalanche_id_c <> ''"); while($row = $db->fetchByAssoc($res)) { $evalanche_ids = explode(',',$row["k_evalanche_id_c"]); foreach($evalanche_ids as $evalanche_id) { $targetgroup_ids[] = $evalanche_id; } } } } $targetgroup_ids = array_unique($targetgroup_ids); if(count($targetgroup_ids) > 0) { $myLists = $evalancheSyncPlugin->credaris_140($campaign_id, false, $sync_type); if(count($myLists) == 2 && !is_array($myLists[0])) { list($attribute_id, $option_id) = $myLists; $evalancheSyncPlugin->credaris_141($targetgroup_ids, $option_id); } else { foreach($myLists as $listPair) { list($attribute_id, $option_id) = $listPair; $evalancheSyncPlugin->credaris_141($targetgroup_ids, $option_id); } } $category_id = $sugar_config['K_EvalancheConnector']['Contacts']['category_id']; if(count($myLists) == 2 && !is_array($myLists[0])) { if($evalancheSyncPlugin->credaris_142($category_id, $campaign_id, $attribute_id, $option_id, false, $sync_type)); } else { foreach($myLists as $listPair) { list($attribute_id, $option_id) = $listPair; if($evalancheSyncPlugin->credaris_142($category_id, $campaign_id, $attribute_id, $option_id, false, $sync_type)) break; } } $current_language = $GLOBALS["current_language"]; if(stristr($current_language,"de_") || stristr($current_language,"ge_")) $msg = "Ihre Zielgruppe wurde erfolgreich in Evalanche angelegt!"; else $msg = "Your Target list was successfully created in Evalanche!"; if($returnResult) return Array('msg'=>$msg, 'success'=>true); SugarApplication::redirect("index.php?module=K_EvaCampaigns&modal_msg=$msg&return_url=".urlencode("index.php?module=$sync_type"."s&action=DetailView&record=$campaign_id")."#openModal"); exit; } else { $current_language = $GLOBALS["current_language"]; if(stristr($current_language,"de_") || stristr($current_language,"ge_")) $msg = "Ihre Zielgruppe konnte nicht angelegt werden, es wurden keine Kontakte mit passender E-Mail Adresse gefunden!"; else $msg = "Your Targetlist could not be created, no contacts with matching email-address found!"; if($returnResult) return Array('msg'=>$msg, 'success'=>false); SugarApplication::redirect("index.php?module=K_EvaCampaigns&modal_msg=$msg&return_url=".urlencode("index.php?module=$sync_type"."s&action=DetailView&record=$campaign_id")."#openModal"); exit; } $evalancheSyncPlugin->enableLogging = false; $cronjob_started = false; } }