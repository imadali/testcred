<?php

/*********************************************************************************
*
* DO NOT MODIFY THIS FILE!
*
* This file is part of KINAMU EvalancheConnector, an enhanced module for Sugar (TM). 
* Sugar (TM) is developed by SugarCRM Inc. (C).
* 
* KINAMU EvalancheConnector is licensed software and may only be used in alignment with the 
* End User License Agreement (EULA) received with this software. This software is copyrighted 
* and may not be further distributed without any written consent of 
* KINAMU Business Solutions GmbH (C).
* 
* KINAMU EvalancheConnector: Copyright (C) 2016 by KINAMU Business Solutions GmbH. All rights reserved.
*
* You can contact KINAMU Business Solutions GmbH via email at office@kinamu.com
*
********************************************************************************/


require_once('modules/K_EvalancheConnector/credaris_157.php'); require_once('modules/K_EvalancheConnector/credaris_158.php'); require_once('modules/Administration/Administration.php'); class K_EvalancheConnectorPlugin_Contacts extends K_EvalancheConnectorPlugin { public function __construct() { $this->sCustomerId = 'Y3421CH141'; $this->sLogDebugFileEvaToSug = "kinamu_eva_sync_evalanche2sugar.txt"; $this->sLogDebugFileSugToEva = "kinamu_eva_sync_sugar2evalanche.txt"; $this->bLogDebugEvaToSug = true; $this->bLogDebugSugToEva = true; $this->sModule = 'Contacts'; $this->sBean = 'Contact'; $this->modPath = 'custom/modules/K_EvalancheConnector/'; $this->sHeadline = "SugarCRM Contacts &harr; Evalanche Profile"; $this->credaris_150['PROFILEID'] = 'k_evalanche_id'; $this->credaris_150['FIRSTNAME'] = 'first_name'; $this->credaris_150['NAME'] = 'last_name'; $this->credaris_150['SALUTATION'] = 'salutation'; $this->credaris_150['COMPANY'] = 'account_name'; $this->credaris_150['EMAIL'] = 'email'; $this->credaris_150['ADDRESS'] = 'primary_address_street'; $this->credaris_150['ZIPCODE'] = 'primary_address_postalcode'; $this->credaris_150['CITY'] = 'primary_address_city'; $this->credaris_150['CHANGE_DATE'] = 'date_modified'; $this->credaris_150['DELETED'] = 'opt_out'; $this->credaris_150['HARDBOUNCES'] = 'invalid_email'; $this->credaris_151 = 'PROFILEID'; $this->credaris_152 = 'Source: Homepage (Leadpool)'; $this->credaris_153 = $this->getNumberFormattedFields($this->sModule, $this->sBean); $this->getSugarFieldDefinitions(); $this->aTasks['history'] = 'History'; $this->aTasks['sync'] = 'Synchronize'; $this->aTasks['config'] = 'Configuration'; $this->aTasks['crontab'] = 'Start Cronjob'; parent::__construct(); $this->credaris_154 = array( 'PROFILEID', 'FIRSTNAME', 'NAME', 'SALUTATION', 'COMPANY', 'EMAIL', 'ADDRESS', 'STREETNUMBER', 'ZIPCODE', 'CITY', 'COUNTRY', 'STATE', 'CHANGE_DATE', 'HARDBOUNCES', 'DELETED', 'UNSUBSCRIBE_DATE', ); $this->credaris_155 = array(); $this->credaris_155Contacts = array(); $this->credaris_155Leads = array(); $this->credaris_132(); $this->aConfig = $this->getConfig(); $this->aConnectionParams = $this->credaris_133(); $this->aRequestParams = $this->credaris_134(); } public function writeDebugEvaToSug($sLog) { if($this->bLogDebugEvaToSug) { } } public function writeDebugSugToEva($sLog) { if($this->bLogDebugSugToEva) { } } public function getSugarFieldDefinitions() { if(property_exists($this, "aSugarFieldDefinitions") && is_array($this->aSugarFieldDefinitions) && !empty($this->aSugarFieldDefinitions)) { return; } $this->aSugarFieldDefinitions = array(); $oContact = new Contact(); $this->aSugarFieldDefinitions = $oContact->getFieldDefinitions(); $oLead = new Lead(); $aFields = $oLead->getFieldDefinitions(); foreach($aFields as $sField => $aField) { if(!isset($this->aSugarFieldDefinitions[$sField])) { $this->aSugarFieldDefinitions[$sField] = $aField; } } if($this->bLogDebugEvaToSug) { $sLog = "\r\n"; $sLog .= "========================================\r\n"; $sLog .= "FIELD DEFINITIONS IN SUGAR:\r\n"; $sLog .= "getSugarFieldDefinitions()\r\n"; $sLog .= "========================================\r\n"; $sLog .= print_r($this->aSugarFieldDefinitions, 1); } } public function credaris_132() { $sugar_config = & $GLOBALS["sugar_config"]; if(!isset($GLOBALS["eva_conf_loaded"]) || ($GLOBALS["eva_conf_loaded"] != true)) { $administrationObj = new Administration(); $administrationObj->retrieveSettings('K_EvalancheConnector'); $contactFields = Array("pool_id","pool_id_lead","pool_id_addto","eva_time_offset","master","eva_url","sync_eva_to_sugar", "sync_sugar_to_eva","sync_primary","merge_emails","ignore_email","category_id","main_type","sync_type","ignore_leads"); $campaignFields = Array("mandate_id","type_id","eva_time_offset","eva_url","refreshlimit","daylimit","max_running_mins", "get_statistics","get_recipients","get_impressions","get_article_impressions","get_unsubscribes"); if($administrationObj->settings["K_EvalancheConnector_pool_id"]) { foreach($contactFields as $field) { $sugar_config['K_EvalancheConnector']['Contacts'][$field] = $administrationObj->settings['K_EvalancheConnector_'.$field]; } foreach($campaignFields as $field) { $sugar_config['K_EvalancheConnector']['Campaigns'][$field] = $administrationObj->settings['K_EvalancheConnector_'.$field]; } $sugar_config['K_EvalancheConnector']['Campaigns']['connection']['username'] = $sugar_config['K_EvalancheConnector']['Contacts']['connection']['username'] = $administrationObj->settings["K_EvalancheConnector_username"]; $sugar_config['K_EvalancheConnector']['Campaigns']['connection']['password'] = $sugar_config['K_EvalancheConnector']['Contacts']['connection']['password'] = $administrationObj->settings["K_EvalancheConnector_password"]; $sugar_config['K_EvalancheConnector']['Contacts']['mappings'] = unserialize(str_replace("&quot;",'"',$administrationObj->settings["K_EvalancheConnector_mappings"])); $sugar_config['K_EvalancheConnector']['Contacts']['mappingdefaults'] = unserialize(str_replace("&quot;",'"',$administrationObj->settings["K_EvalancheConnector_mappingdefaults"])); $GLOBALS["eva_conf_loaded"] = true; } } return $sugar_config; } public function credaris_133() { $aParams = array(); $aParams['sUsername'] = isset($this->aConfig['connection']['username']) ? $this->aConfig['connection']['username'] : 'dummyX'; $aParams['sPassword'] = isset($this->aConfig['connection']['password']) ? $this->aConfig['connection']['password'] : 'dummyX'; $aParams['sEndpoint'] = 'Profile'; return $aParams; } public function credaris_134() { $sugar_config = $GLOBALS["sugar_config"]; $db = $GLOBALS["db"]; $aParams = array(); $aParams['id'] = isset($this->aConfig['pool_id']) ? $this->aConfig['pool_id'] : ''; $aParams['array'] = $this->credaris_154; if(isset($sugar_config['K_EvalancheConnector']['Contacts']['mappings']) && is_array($sugar_config['K_EvalancheConnector']['Contacts']['mappings'])) { foreach($sugar_config['K_EvalancheConnector']['Contacts']['mappings'] as $mappingPair) { $mappingPair = trim($mappingPair); $mappingPair = explode(':',$mappingPair); if(empty($mappingPair)) { continue; } $aParams['array'][] = $mappingPair[1]; if(!isset($this->credaris_150[$mappingPair[1]])) { $this->credaris_150[$mappingPair[1]] = $mappingPair[0]; $res = $db->query("show columns from contacts_cstm where Field = '".$mappingPair[0]."'"); if(!($row = $db->fetchByAssoc($res))) { $res = $db->query("show columns from contacts where Field = '".$mappingPair[0]."'"); $row = $db->fetchByAssoc($res); } $res2 = $db->query("show columns from leads where Field = '".$mappingPair[0]."'"); if(!($row2 = $db->fetchByAssoc($res2))) { $res2 = $db->query("show columns from leads_cstm where Field = '".$mappingPair[0]."'"); $row2 = $db->fetchByAssoc($res2); } if($row || $row2) { $this->credaris_155[$mappingPair[1]] = $this->credaris_155[$mappingPair[0]] = ($row ? $row["Type"] : $row2["Type"]); } if($row) { $this->credaris_155Contacts[$mappingPair[1]] = $this->credaris_155Contacts[$mappingPair[0]] = $row["Type"]; } if($row2) { $this->credaris_155Leads[$mappingPair[1]] = $this->credaris_155Leads[$mappingPair[0]] = $row2["Type"]; } } } } return $aParams; } public function updateConfig() { $replaceArr = Array('pool_id' => $_REQUEST['kec_poolId'], 'pool_id_lead' => $_REQUEST['pool_id_lead'], 'pool_id_addto' => $_REQUEST['pool_id_addto'], 'eva_time_offset' => $_REQUEST['offset'], 'master' => $_REQUEST['master'], 'main_type' => $_REQUEST['main_type'], 'sync_type' => $_REQUEST['sync_type'], 'sync_eva_to_sugar' => $_REQUEST['sync_eva_sugar'], 'sync_sugar_to_eva' => $_REQUEST['sync_sugar_eva'], 'sync_primary' => $_REQUEST['kec_primary'], 'merge_emails' => $_REQUEST['merge_emails'], 'ignore_email' => $_REQUEST['ignore_email'], 'eva_url' => $_REQUEST['eva_url'], 'eusername' => $_REQUEST['eusername'], 'epassword' => $_REQUEST['epassword'], 'category_id' => $_REQUEST['category_id'], 'ignore_leads' => $_REQUEST['ignore_leads'], ); $administrationObj = new Administration(); foreach($replaceArr as $varName => $varVal) { $varVal = str_replace('%40','@',str_replace('%2C',',',urldecode($varVal))); if($varName=="eusername"||$varName=="epassword") { if($varName=="epassword") { $varName = "password"; if(!trim($_REQUEST["pwd_chg"])) continue; $administrationObj->saveSetting("K_EvalancheConnector", $varName, $varVal); } else { $varName = "username"; $administrationObj->saveSetting("K_EvalancheConnector", $varName, $varVal); } } else $administrationObj->saveSetting("K_EvalancheConnector", $varName, $varVal); } $mappings = $_REQUEST["emapping"]; $mappingsdefault = $_REQUEST["emappingdefault"]; $save_mappings = Array(); $save_defaults = Array(); $j=0; if(is_array($mappings) && count($mappings)>0) { for($i=0; $i<count($mappings) ;$i+=2) { if($mappings[$i] && $mappings[$i+1]) { $save_mappings[] = $mappings[$i].":".$mappings[$i+1]; $save_defaults[] = $mappingsdefault[$i/2]; } } } $administrationObj->saveSetting("K_EvalancheConnector", "mappings", serialize($save_mappings)); $administrationObj->saveSetting("K_EvalancheConnector", "mappingdefaults", serialize($save_defaults)); } public function renderConfig() { $current_language = $GLOBALS["current_language"]; if(!isset($GLOBALS["mod_strings"]) || !isset($GLOBALS["mod_strings"]['LBL_FORM_CONFIG_HEADLINE'])) { $my_mod_strings = "mod_strings"; $$my_mod_strings = &$GLOBALS["mod_strings"]; if(stristr($current_language,"de_") || stristr($current_language,"ge_")) include("custom/modules/K_EvalancheConnector/plugins/Contacts/language/de_DE.lang.php"); else include("custom/modules/K_EvalancheConnector/plugins/Contacts/language/en_us.lang.php"); } if(stristr($current_language,"de_") || stristr($current_language,"ge_")) { $txt_leads = "Interessenten"; $txt_contacts = "Kontakte"; $txt_leads2 = "Sync. nur Interessenten"; $txt_contacts2 = "Sync. nur Kontakte"; $txt_all2 = "Sync. Kontakte&Interessenten"; } else { $txt_leads = "Leads"; $txt_contacts = "Contacts"; $txt_leads2 = "Sync. Only Leads"; $txt_contacts2 = "Sync. Only Contacts"; $txt_all2 = "Sync. Contacts&Leads"; } $mod_strings = $GLOBALS["mod_strings"]; $app_list_strings = $GLOBALS["app_list_strings"]; $app_strings = $GLOBALS["app_strings"]; if(isset($_REQUEST["todo"]) && ($_REQUEST["todo"] == 'saveCFG')) { $this->updateConfig(); return; } $aFormFields['module']['name'] = 'module'; $aFormFields['module']['value'] = $_REQUEST['module']; $aFormFields['action']['name'] = 'action'; $aFormFields['action']['value'] = $_REQUEST['action']; $aFormFields['plugin']['name'] = 'plugin'; $aFormFields['plugin']['value'] = $this->sPluginName; $aFormFields['task']['name'] = 'action'; $aFormFields['task']['value'] = $_REQUEST['task']; $aFormFields['pool_id']['name'] = 'kec_poolId'; $aFormFields['pool_id']['value'] = $this->aConfig['pool_id']; $aFormFields['pool_id_lead']['name'] = 'pool_id_lead'; $aFormFields['pool_id_lead']['value'] = $this->aConfig['pool_id_lead']; $aFormFields['pool_id_addto']['name'] = 'pool_id_addto'; $aFormFields['pool_id_addto']['value'] = $this->aConfig['pool_id_addto']; $aFormFields['category_id']['name'] = 'category_id'; $aFormFields['category_id']['value'] = $this->aConfig['category_id']; $aFormFields['sync_primary_email_addresses_only']['name'] = 'kec_primary'; $aFormFields['sync_primary_email_addresses_only']['value'] = $this->aConfig['sync_primary']; $aFormFields['time_offset']['name'] = 'offset'; $aFormFields['time_offset']['value'] = $this->aConfig['eva_time_offset']; $aFormFields['master']['name'] = 'master'; $aFormFields['master']['value'] = $this->aConfig['master']; $aFormFields['main_type']['name'] = 'main_type'; $aFormFields['main_type']['value'] = $this->aConfig['main_type']; $aFormFields['sync_type']['name'] = 'sync_type'; $aFormFields['sync_type']['value'] = $this->aConfig['sync_type']; $aFormFields['sync_eva_to_sugar']['name'] = 'sync_eva_sugar'; $aFormFields['sync_eva_to_sugar']['value'] = $this->aConfig['sync_eva_to_sugar']; $aFormFields['sync_sugar_to_eva']['name'] = 'sync_sugar_eva'; $aFormFields['sync_sugar_to_eva']['value'] = $this->aConfig['sync_sugar_to_eva']; $aFormFields['merge_emails']['name'] = 'merge_emails'; $aFormFields['merge_emails']['value'] = $this->aConfig['merge_emails']; $aFormFields['ignore_email']['name'] = 'ignore_email'; $aFormFields['ignore_email']['value'] = $this->aConfig['ignore_email']; $aFormFields['ignore_leads']['name'] = 'ignore_leads'; $aFormFields['ignore_leads']['value'] = $this->aConfig['ignore_leads']; $aFormFields['eva_url']['name'] = 'eva_url'; $aFormFields['eva_url']['value'] = $this->aConfig['eva_url']; $aFormFields['eusername']['name'] = 'eusername'; $aFormFields['eusername']['value'] = $this->aConfig['connection']['username']; $aFormFields['epassword']['name'] = 'epassword'; $aFormFields['epassword']['value'] = $this->aConfig['connection']['password']; if(isset($_POST[$aFormFields['pool_id']['name']])) { if($this->credaris_135($aFormFields)) { echo 'true'; } exit; } $bLoadDefaultConfig = isset($_REQUEST['loadDefault']) ? true : false; $aMapping = Array(); $sHtml = '<form name="kinamuAdminSingleForm" method="POST">'; $sHtml .= '<input type="hidden" name="' . $aFormFields['module']['name'] . '" value="' . $aFormFields['module']['value'] . '">'; $sHtml .= '<input type="hidden" name="' . $aFormFields['action']['name'] . '" value="' . $aFormFields['action']['value'] . '">'; $sHtml .= '<input type="hidden" name="' . $aFormFields['plugin']['name'] . '" value="' . $aFormFields['plugin']['value'] . '">'; $sHtml .= '<h4>' . $mod_strings['LBL_FORM_CONFIG_HEADLINE'] . '</h4>'; $sHtml .= '<div>' . $mod_strings['LBL_FORM_CONFIG_INFO'] . '</div>'; $sHtml .= '<div id="detailpanel_2" class="edit view edit508  expanded">'; $sHtml .= '<table width="100%" border="0" cellspacing="1" cellpadding="0" id="LBL_PANEL_ADVANCED" class="yui3-skin-sam edit view panelContainer">'; $sHtml .= '<tbody>'; $sHtml .= '<tr>'; $sHtml .= '<td valign="top" width="12%" scope="col">' . $mod_strings['LBL_CONTACTS_POOL_ID'] . ':</td>'; $sHtml .= '<td valign="top" width="1%"><img src="modules/' . $aFormFields['module']['value'] . '/images/information.png" title="' . $mod_strings['LBL_CONTACTS_POOL_ID_HELP'] . '"></td>'; $sHtml .= '<td valign="top" width="37%"><input type="text" name="' . $aFormFields['pool_id']['name'] . '" id="' . $aFormFields['pool_id']['name'] . '" value="' . $aFormFields['pool_id']['value'] . '"></td>'; $sHtml .= '<td valign="top" width="12%" scope="col">'.$mod_strings['LBL_OS_CONTACTS_SYNC_PRIMARY'].'</td>'; $sHtml .= '<td valign="top" width="1%"><img src="modules/' . $aFormFields['module']['value'] . '/images/information.png" title="' . $mod_strings['LBL_OS_CONTACTS_SYNC_PRIMARY_HELP']. '"></td>'; $sChecked = ($aFormFields['sync_primary_email_addresses_only']['value'] == 1) ? 'checked' : ''; $sHtml .= '<td valign="top" width="37%"><input type="checkbox" name="' . $aFormFields['sync_primary_email_addresses_only']['name'] . '" id="' . $aFormFields['sync_primary_email_addresses_only']['name'] . '" value="' . $aFormFields['sync_primary_email_addresses_only']['value'] . '" ' . $sChecked . ' onclick="this.checked=!this.checked; alert(\'You can only sync. primary contacts at the moment!\');"></td>'; $sHtml .= '</tr>'; $sHtml .= '<tr>'; $sHtml .= '<td valign="top" width="12%" scope="col">' . $mod_strings['LBL_CONTACTS_POOL_ID_LEAD'] . ':</td>'; $sHtml .= '<td valign="top" width="1%"><img src="modules/' . $aFormFields['module']['value'] . '/images/information.png" title="' . $mod_strings['LBL_CONTACTS_POOL_ID_LEAD_HELP'] . '"></td>'; $sHtml .= '<td valign="top" width="37%"><input type="text" name="' . $aFormFields['pool_id_lead']['name'] . '" id="' . $aFormFields['pool_id_lead']['name'] . '" value="' . $aFormFields['pool_id_lead']['value'] . '" onkeyup="if(this.value.indexOf(\',\')!=-1) { this.value = this.value.replace(/,/g,\'\'); alert(\'Just one pool is allowed here!\'); }"></td>'; $sHtml .= '<td valign="top" width="12%" scope="col">' . $mod_strings['LBL_CONTACTS_POOL_ID_ADDTO'] . ':</td>'; $sHtml .= '<td valign="top" width="1%"><img src="modules/' . $aFormFields['module']['value'] . '/images/information.png" title="' . $mod_strings['LBL_CONTACTS_POOL_ID_ADDTO_HELP'] . '"></td>'; $sHtml .= '<td valign="top" width="37%"><input type="text" name="' . $aFormFields['pool_id_addto']['name'] . '" id="' . $aFormFields['pool_id_addto']['name'] . '" value="' . $aFormFields['pool_id_addto']['value'] . '" onkeyup="if(this.value.indexOf(\',\')!=-1) { this.value = this.value.replace(/,/g,\'\'); alert(\'Just one pool is allowed here!\'); }"></td>'; $sHtml .= '</tr>'; $sHtml .= '<tr>'; $sHtml .= '<td valign="top" width="12%" scope="col">' . $mod_strings['LBL_CONTACTS_TIME_OFFSET'] . ':</td>'; $sHtml .= '<td valign="top" width="1%"><img src="modules/' . $aFormFields['module']['value'] . '/images/information.png" title="' . $mod_strings['LBL_CONTACTS_TIME_OFFSET_HELP'] . '"></td>'; $sHtml .= '<td valign="top" width="37%"><input type="text" name="' . $aFormFields['time_offset']['name'] . '" id="' . $aFormFields['time_offset']['name'] . '" value="' . $aFormFields['time_offset']['value'] . '"></td>'; $evaChk = ''; $sugarChk = ''; if($aFormFields['master']['value'] == 'eva') $evaChk = ' selected'; else $sugarChk = ' selected'; $sHtml .= '<td valign="top" width="12%" scope="col">' . $mod_strings['LBL_CONTACTS_MASTER'] . '</td>'; $sHtml .= '<td valign="top" width="1%"><img src="modules/' . $aFormFields['module']['value'] . '/images/information.png" title="' . $mod_strings['LBL_CONTACTS_MASTER_HELP'] . '"></td>'; $sHtml .= '<td valign="top" width="37%"><select name="' . $aFormFields['master']['name'] . '" id="' . $aFormFields['master']['name'] . '" value="' . $aFormFields['master']['value'] . '">'; $sHtml .= '<option value="eva"'.$evaChk.'>Evalanche</option><option value="sugar"'.$sugarChk.'>SugarCRM</option></select></td>'; $sHtml .= '</tr>'; $sHtml .= '<tr>'; $sHtml .= '<td valign="top" width="12%" scope="col">' . $mod_strings['LBL_EVA_URL'] . ':</td>'; $sHtml .= '<td valign="top" width="1%"><img src="modules/' . $aFormFields['module']['value'] . '/images/information.png" title="' . $mod_strings['LBL_EVA_URL_HELP'] . '"></td>'; $sHtml .= '<td valign="top" width="37%"><input type="text" name="' . $aFormFields['eva_url']['name'] . '" id="' . $aFormFields['eva_url']['name'] . '" value="' . $aFormFields['eva_url']['value'] . '"></td>'; $sHtml .= '<td valign="top" width="12%" scope="col"></td>'; $sHtml .= '<td valign="top" width="1%"></td>'; $sHtml .= '<td valign="top" width="37%">'; $sHtml .= '</td>'; $sHtml .= '</tr>'; $sHtml .= '<tr>'; $sHtml .= '<td valign="top" width="12%" scope="col">'.$mod_strings['LBL_SYNC_SUGAR_EVA'].'</td>'; $sHtml .= '<td valign="top" width="1%"><img src="modules/' . $aFormFields['module']['value'] . '/images/information.png" title="' . $mod_strings['LBL_SYNC_SUGAR_EVA_HELP']. '"></td>'; $sChecked = ($aFormFields['sync_sugar_to_eva']['value'] == 1) ? 'checked' : ''; $sHtml .= '<td valign="top" width="37%"><input type="checkbox" name="' . $aFormFields['sync_sugar_to_eva']['name'] . '" id="' . $aFormFields['sync_sugar_to_eva']['name'] . '" value="' . $aFormFields['sync_sugar_to_eva']['value'] . '" ' . $sChecked . '></td>'; $sHtml .= '<td valign="top" width="12%" scope="col">'.$mod_strings['LBL_SYNC_EVA_SUGAR'].'</td>'; $sHtml .= '<td valign="top" width="1%"><img src="modules/' . $aFormFields['module']['value'] . '/images/information.png" title="' . $mod_strings['LBL_SYNC_EVA_SUGAR_HELP']. '"></td>'; $sChecked = ($aFormFields['sync_eva_to_sugar']['value'] == 1) ? 'checked' : ''; $sHtml .= '<td valign="top" width="37%"><input type="checkbox" name="' . $aFormFields['sync_eva_to_sugar']['name'] . '" id="' . $aFormFields['sync_eva_to_sugar']['name'] . '" value="' . $aFormFields['sync_eva_to_sugar']['value'] . '" ' . $sChecked . '></td>'; $sHtml .= '</tr>'; $sHtml .= '<tr>'; $sHtml .= '<td valign="top" width="12%" scope="col">'.$mod_strings['LBL_MERGE_EMAILS'].'</td>'; $sHtml .= '<td valign="top" width="1%"><img src="modules/' . $aFormFields['module']['value'] . '/images/information.png" title="' . $mod_strings['LBL_MERGE_EMAILS_HELP']. '"></td>'; $sChecked = ($aFormFields['merge_emails']['value'] == 1) ? 'checked' : ''; $sHtml .= '<td valign="top" width="37%"><input type="checkbox" name="' . $aFormFields['merge_emails']['name'] . '" id="' . $aFormFields['merge_emails']['name'] . '" value="' . $aFormFields['merge_emails']['value'] . '" ' . $sChecked . '></td>'; $sHtml .= '<td valign="top" width="12%" scope="col">' . $mod_strings['LBL_IGNORE_EMAIL'] . ':</td>'; $sHtml .= '<td valign="top" width="1%"><img src="modules/' . $aFormFields['module']['value'] . '/images/information.png" title="' . $mod_strings['LBL_IGNORE_EMAIL_HELP'] . '"></td>'; $sHtml .= '<td valign="top" width="37%"><input type="text" name="' . $aFormFields['ignore_email']['name'] . '" id="' . $aFormFields['ignore_email']['name'] . '" value="' . $aFormFields['ignore_email']['value'] . '" style="width:90%;"></td>'; $sHtml .= '</tr>'; $leadChk = ""; $sHtml .= '<tr>'; if($aFormFields['main_type']['value'] == 'lead') $leadChk = ' selected'; else $contactChk = ' selected'; $sHtml .= '<td valign="top" width="12%" scope="col">' . $mod_strings['LBL_CONTACTS_MAIN_TYPE'] . '</td>'; $sHtml .= '<td valign="top" width="1%"><img src="modules/' . $aFormFields['module']['value'] . '/images/information.png" title="' . $mod_strings['LBL_CONTACTS_MAIN_TYPE_HELP'] . '"></td>'; $sHtml .= '<td valign="top" width="37%"><select name="' . $aFormFields['main_type']['name'] . '" id="' . $aFormFields['main_type']['name'] . '" value="' . $aFormFields['main_type']['value'] . '">'; $sHtml .= '<option value="contact"'.$contactChk.'>'.$txt_contacts.'</option><option value="lead"'.$leadChk.'>'.$txt_leads.'</option></select></td>'; $sHtml .= '<td valign="top" width="12%" scope="col">' . $mod_strings['LBL_CONTACTS_CATEGORY_ID'] . ':</td>'; $sHtml .= '<td valign="top" width="1%"><img src="modules/' . $aFormFields['module']['value'] . '/images/information.png" title="' . $mod_strings['LBL_CONTACTS_CATEGORY_ID_HELP'] . '"></td>'; $sHtml .= '<td valign="top" width="37%"><input type="text" name="' . $aFormFields['category_id']['name'] . '" id="' . $aFormFields['category_id']['name'] . '" value="' . $aFormFields['category_id']['value'] . '" onkeyup="if(this.value.indexOf(\',\')!=-1) { this.value = this.value.replace(/,/g,\'\'); alert(\'Just one category is allowed here!\'); }"></td>'; $sHtml .= '</tr>'; $sHtml .= '<tr>'; $leadChk = $contactChk = $allChk = ""; if($aFormFields['sync_type']['value'] == 'lead') $leadChk = ' selected'; else if($aFormFields['sync_type']['value'] == 'all') $allChk = ' selected'; else $contactChk = ' selected'; $sHtml .= '<td valign="top" width="12%" scope="col">' . $mod_strings['LBL_CONTACTS_SYNC_TYPE'] . '</td>'; $sHtml .= '<td valign="top" width="1%"><img src="modules/' . $aFormFields['module']['value'] . '/images/information.png" title="' . $mod_strings['LBL_CONTACTS_SYNC_TYPE_HELP'] . '"></td>'; $sHtml .= '<td valign="top" width="37%"><select name="' . $aFormFields['sync_type']['name'] . '" id="' . $aFormFields['sync_type']['name'] . '" value="' . $aFormFields['sync_type']['value'] . '">'; $sHtml .= '<option value="all"'.$allChk.'>'.$txt_all2.'</option><option value="contact"'.$contactChk.'>'.$txt_contacts2.'</option><option value="lead"'.$leadChk.'>'.$txt_leads2.'</option></select></td>'; $sHtml .= '<td valign="top" width="12%" scope="col">' . $mod_strings['LBL_CONTACTS_IGNORE_LEADS'] . '</td>'; $sHtml .= '<td valign="top" width="1%"><img src="modules/' . $aFormFields['module']['value'] . '/images/information.png" title="' . $mod_strings['LBL_CONTACTS_IGNORE_LEADS_HELP'] . '"></td>'; $sChecked = ($aFormFields['ignore_leads']['value'] == 1) ? 'checked' : ''; $sHtml .= '<td valign="top" width="37%"><input type="checkbox" name="' . $aFormFields['ignore_leads']['name'] . '" id="' . $aFormFields['ignore_leads']['name'] . '" value="' . $aFormFields['ignore_leads']['value'] . '" ' . $sChecked . '></td>'; $sHtml .= '</tr>'; $sHtml .= '<tr>'; $sHtml .= '<td valign="top" width="12%" scope="col">' . $mod_strings['LBL_CONTACTS_USERNAME'] . ':</td>'; $sHtml .= '<td valign="top" width="1%"><img src="modules/' . $aFormFields['module']['value'] . '/images/information.png" title="' . $mod_strings['LBL_CONTACTS_USERNAME_HELP'] . '"></td>'; $sHtml .= '<td valign="top" width="37%"><input type="text" name="' . $aFormFields['eusername']['name'] . '" id="' . $aFormFields['eusername']['name'] . '" value="' . $aFormFields['eusername']['value'] . '" style="width:90%;"></td>'; $sHtml .= '<td valign="top" width="12%" scope="col">' . $mod_strings['LBL_CONTACTS_PASSWORD'] . ':</td>'; $sHtml .= '<td valign="top" width="1%"><img src="modules/' . $aFormFields['module']['value'] . '/images/information.png" title="' . $mod_strings['LBL_CONTACTS_PASSWORD_HELP'] . '"></td>'; $sHtml .= '<td valign="top" width="37%"><input onchange="$(\'#pwd_chg\').val(true);" type="password" name="' . $aFormFields['epassword']['name'] . '" id="' . $aFormFields['epassword']['name'] . '" value="' . $aFormFields['epassword']['value'] . '" style="width:90%;"></td>'; $sHtml .= "<input type=hidden name='pwd_chg' id='pwd_chg'>"; $sHtml .= '</tr>'; $sHtml .= '</tbody>'; $sHtml .= '</table>'; $sHtml .= '</div>'; $sHtml .= '<script type="text/javascript" src="custom/modules/K_EvalancheConnector/plugins/Contacts/settings.js"></script>'; $sHtml .= '<script type="text/javascript">'; $sHtml .= 'K_EvalancheConnectorPluginContacts.sSugarOptions = \'<option value="">' . $mod_strings['LBL_FORM_SELECT_PLEASE_SELECT'] . '</option>\';'; $sHtml .= 'K_EvalancheConnectorPluginContacts.sEvalancheOptions = \'<option value="">' . $mod_strings['LBL_FORM_SELECT_PLEASE_SELECT'] . '</option>\';'; $sHtml .= 'K_EvalancheConnectorPluginContacts.aMapping = null;'; $sHtml .= 'K_EvalancheConnectorPluginContacts.oSugarModuleFields = null;'; $sHtml .= 'K_EvalancheConnectorPluginContacts.oEvalancheFields = null;'; $sHtml .= '</script>'; $sHtml .= '<h4>'.$mod_strings['LBL_CUSTOM_MAPPINGS'].'</h4>'; $sHtml .= '<div>&nbsp;'.$mod_strings['LBL_CUSTOM_MAPPINGS_DETAIL'].'</div>'; $sHtml .= '<table id="custom_field_mapping_table" class="edit view" style="margin-bottom:0px;width:450px;margin-top:10px;" border="0" cellspacing="1" cellpadding="1">'; $sHtml .= '<tr>'; $sHtml .= '<td scope="row" nowrap="nowrap">'.$mod_strings['LBL_FORM_MAPPING_SUGAR'].':</td>'; $sHtml .= '<td scope="row" nowrap="nowrap">'.$mod_strings['LBL_FORM_MAPPING_EVA'].':</td>'; $sHtml .= '<td scope="row" nowrap="nowrap">'.$mod_strings['LBL_FORM_MAPPING_DEFAULT'].':</td>'; $sHtml .= '</tr>'; $i = 0; if(is_array($this->aConfig['mappings']) && count($this->aConfig['mappings'])>0) { foreach($this->aConfig['mappings'] as $mappingObj) { $mappingObj = explode(':',$mappingObj); if(!$mappingObj[0] && !$mappingObj[1]) continue; $sHtml .= '<tr>'; $sHtml .= '<td scope="row" nowrap="nowrap"><input type="text" name="emapping['.($i++).']" value="'.$mappingObj[0].'"></td>'; $sHtml .= '<td scope="row" nowrap="nowrap"><input type="text" name="emapping['.($i++).']" value="'.$mappingObj[1].'"></td>'; $sHtml .= '<td scope="row" nowrap="nowrap"><input type="text" name="emappingdefault['.($i/2-1).']" value="'.(isset($this->aConfig['mappingdefaults'])?$this->aConfig['mappingdefaults'][($i/2-1)]:"").'">'. '<img border=0 id="emapping_del_'.$i.'" src="modules/K_EvalancheConnector/images/delete.gif" title="Delete" style="width:16px;height:16px;position:relative;left:5px;top:2px;cursor:pointer;"'. ' onclick="$(\'#emapping_del_'.$i.'\').parent().parent().find(\'input\').val(\'\'); $(\'#emapping_del_'.$i.'\').parent().parent().hide();"></td>'; $sHtml .= '</tr>'; } } $sHtml .= '<tr>'; $sHtml .= '<td scope="row" nowrap="nowrap"><input type="text" name="emapping['.($i++).']" value=""></td>'; $sHtml .= '<td scope="row" nowrap="nowrap"><input type="text" name="emapping['.($i++).']" value=""></td>'; $sHtml .= '<td scope="row" nowrap="nowrap"><input type="text" name="emappingdefault['.($i/2-1).']" value=""></td>'; $sHtml .= '</tr>'; $sHtml .= '</table><br>'; $sHtml .= '<table border="0" cellspacing="1" cellpadding="1">'; $sHtml .= '<tr>'; $sHtml .= '<td>'; $sHtml .= '<input title="' . $app_strings['LBL_SAVE_BUTTON_LABEL'] . '" class="button primary" onclick="K_EvalancheConnectorPluginContacts.submitForm();" type="button" name="button" value="' . $app_strings['LBL_SAVE_BUTTON_LABEL'] . '">'; $sHtml .= '<input title="' . $app_strings['LBL_CANCEL_BUTTON_LABEL'] . '" class="button" onclick="window.location.assign(\'index.php?module=' . $aFormFields['module']['value'] . '&action=' . $aFormFields['action']['value'] . '&plugin=' . $aFormFields['plugin']['value'] . '&task=' . $aFormFields['task']['value'] . '\');" type="button" name="button" value="' . $app_strings['LBL_CANCEL_BUTTON_LABEL'] . '">'; $sHtml .= '</td>'; $sHtml .= '</tr>'; $sHtml .= '</table>'; $sHtml .= '</form>'; $this->oView->render($sHtml); } public function credaris_135($aFormFields) { $aConfig = array(); $aConfig['pool_id'] = isset($_POST['kec_poolId']) ? $_POST['kec_poolId'] : ''; $aConfig['sync_primary'] = (isset($_POST['kec_sync_primary']) && ($_POST['kec_sync_primary'] == '1')) ? '1' : '0'; $aConfig['mapping'] = array(); if(isset($_POST['kec_mapping_eva_name'])) { foreach($_POST['kec_mapping_eva_name'] as $iLoop => $sDummy) { $aTemp = array(); $aTemp['eva']['name'] = trim(urldecode($_POST['kec_mapping_eva_name'][$iLoop])); $aTemp['eva']['sync'] = (isset($_POST['kec_mapping_eva_sync'][$iLoop]) && ($_POST['kec_mapping_eva_sync'][$iLoop] == 1)) ? '1' : '0'; $aTemp['crm']['name'] = trim(urldecode($_POST['kec_mapping_crm_name'][$iLoop])); $aTemp['crm']['sync'] = (isset($_POST['kec_mapping_crm_sync'][$iLoop]) && ($_POST['kec_mapping_crm_sync'][$iLoop] == 1)) ? '1' : '0'; $bError = (empty($aTemp['eva']['name']) || empty($aTemp['crm']['name'])) ? true : false; if($bError) { printf(translate('LBL_FORM_MAPPING_EVA2CRM_ERROR'), ($iLoop + 1)); return false; } $aConfig['mapping'][] = $aTemp; } } $bSyncEVA2CRM = false; $bSyncCRM2EVA = false; return true; } public function credaris_136($bReload=false, $forceContactIDs=false) { if(empty($this->credaris_138) || $bReload) { $this->credaris_138 = array(); $sugar_config = $GLOBALS["sugar_config"]; $db = $GLOBALS["db"]; $add_clause = ""; $last_email = "###NONE###"; if($sugar_config['K_EvalancheConnector']['Contacts']['ignore_email']) { $add_clause .= " AND ea.email_address NOT IN ('".join("','",explode(",",$sugar_config['K_EvalancheConnector']['Contacts']['ignore_email']))."')"; } $sSql = 'SELECT c.first_name, c.last_name, c.salutation, (SELECT case when MAX(a.name) is null then \'Unbekannt\' else MAX(a.name) end FROM accounts_contacts ac, accounts a WHERE a.id = ac.account_id and ac.deleted=0 and c.id = ac.contact_id) as account_name, '; $sSql .= '       ea.email_address as email, c.phone_work, c.phone_mobile, '; $sSql .= '       (SELECT CONCAT (IF(first_name IS NULL, "", CONCAT(first_name, " ")), last_name) FROM users WHERE id = c.assigned_user_id) AS assigned_user_full_name,'; $sSql .= '       c.phone_fax, c.primary_address_street, c.primary_address_city, c.primary_address_state, c.primary_address_postalcode, '; $sSql .= '       c.primary_address_country, cstm.k_evalanche_id_c, c.id, ea.invalid_email, ea.opt_out, eabr.primary_address, \'contact\' main_type '; if(isset($sugar_config['K_EvalancheConnector']['Contacts']['mappings']) && is_array($sugar_config['K_EvalancheConnector']['Contacts']['mappings']) && count($sugar_config['K_EvalancheConnector']['Contacts']['mappings']) > 0) { foreach($sugar_config['K_EvalancheConnector']['Contacts']['mappings'] as $mappingPair) { if(!trim($mappingPair)) continue; $mappingPair = explode(':',$mappingPair); if(isset($this->credaris_155Contacts[$mappingPair[0]])) { $sSql .= ', '.$mappingPair[0]; } } } $sSql .= ', (select MAX(leads.status) from leads where leads.contact_id = c.id and leads.deleted = \'0\') status'; $sSql .= ', (select MAX(leads.contact_id) from leads where leads.contact_id = c.id and leads.deleted = \'0\') contact_id'; $sSql .= '  FROM contacts c, contacts_cstm cstm, email_addr_bean_rel eabr, email_addresses ea '; $sSql .= ' WHERE c.deleted=0 and eabr.deleted=0 and ea.deleted=0 and c.id = eabr.bean_id and ea.id = eabr.email_address_id'; $sSql .= '   AND eabr.primary_address=1 and cstm.id_c = c.id'; if($sugar_config['K_EvalancheConnector']['Contacts']['sync_type']=='lead') $sSql .= ' AND 1=0 '; $sSql .= (is_array($forceContactIDs) ? " AND c.id IN ('".implode("','",$forceContactIDs)."') " : ' AND (cstm.k_evalanche_sync_c = 1) and (cstm.k_evalanche_state_c = 1) '); $sSql .= ' '.$add_clause.' ORDER BY ea.email_address'; $queryResult = $GLOBALS['db']->query($sSql); while($aRow = $GLOBALS['db']->fetchByAssoc($queryResult)) { if(stristr(",".$sugar_config['K_EvalancheConnector']['Contacts']['ignore_email'].",",','.$aRow["email"].',') || !trim($aRow["email"])) continue; if($aRow["email"] == $last_email) { if(!is_array($this->updateMessages)) { $this->updateMessages = Array(); } $this->updateMessages[] = "E-Mail $last_email ".$this->getContactLink($aRow["id"])." found multiple times... contact skipped!"; if($this->enableLogging) $this->oLog->logMessage(Array('status'=>'E','direction'=>'I','text'=>$this->updateMessages[sizeof($this->updateMessages)-1])); continue; } foreach($aRow as $sField => $mValue) { if(in_array($sField, $this->credaris_153)) { $aRow[$sField] = number_format($mValue, 2, ',', '.'); } else { $aRow[$sField] = htmlspecialchars_decode($mValue, ENT_QUOTES); } } $this->credaris_138[] = $aRow; $last_email = $aRow["email"]; } $sSql = 'SELECT c.first_name, c.last_name, c.salutation, c.account_name, '; $sSql .= '       ea.email_address as email, c.phone_work, c.phone_mobile, '; $sSql .= '       (SELECT CONCAT (IF(first_name IS NULL, "", CONCAT(first_name, " ")), last_name) FROM users WHERE id = c.assigned_user_id) AS assigned_user_full_name,'; $sSql .= '       c.phone_fax, c.primary_address_street, c.primary_address_city, c.primary_address_state, c.primary_address_postalcode, '; $sSql .= '       c.primary_address_country, cstm.k_evalanche_id_c, c.id, ea.invalid_email, ea.opt_out, eabr.primary_address, \'lead\' main_type '; if(isset($sugar_config['K_EvalancheConnector']['Contacts']['mappings']) && is_array($sugar_config['K_EvalancheConnector']['Contacts']['mappings']) && count($sugar_config['K_EvalancheConnector']['Contacts']['mappings']) > 0) { foreach($sugar_config['K_EvalancheConnector']['Contacts']['mappings'] as $mappingPair) { if(!trim($mappingPair)) continue; $mappingPair = explode(':',$mappingPair); if(isset($this->credaris_155Leads[$mappingPair[0]])) { $sSql .= ', '.$mappingPair[0]; } } } $sSql .= '  FROM leads c, leads_cstm cstm, email_addr_bean_rel eabr, email_addresses ea '; $sSql .= ' WHERE c.deleted=0 and eabr.deleted=0 and ea.deleted=0 and c.id = eabr.bean_id and ea.id = eabr.email_address_id'; $sSql .= '   AND eabr.primary_address=1 and cstm.id_c = c.id'; if($sugar_config['K_EvalancheConnector']['Contacts']['sync_type']!='lead' && $sugar_config['K_EvalancheConnector']['Contacts']['sync_type']!='all') { $sSql .= ' AND 1=0 '; } if($sugar_config['K_EvalancheConnector']['Contacts']['ignore_leads']=='1') { $sSql .= ' AND (c.contact_id is null OR c.contact_id="") '; } $sSql .= (is_array($forceContactIDs) ? " AND c.id IN ('".implode("','",$forceContactIDs)."') " : ' AND (cstm.k_evalanche_sync_c = 1) and (cstm.k_evalanche_state_c = 1) '); $sSql .= ' '.$add_clause.' ORDER BY ea.email_address'; $queryResult = $GLOBALS['db']->query($sSql); while($aRow = $GLOBALS['db']->fetchByAssoc($queryResult)) { if(stristr(",".$sugar_config['K_EvalancheConnector']['Contacts']['ignore_email'].",",','.$aRow["email"].',') || !trim($aRow["email"])) continue; if($aRow["email"] == $last_email) { if(!is_array($this->updateMessages)) { $this->updateMessages = Array(); } $this->updateMessages[] = "E-Mail $last_email ".$this->getContactLink($aRow["id"],"Leads")." found multiple times... lead skipped!"; if($this->enableLogging) $this->oLog->logMessage(Array('status'=>'E','direction'=>'I','text'=>$this->updateMessages[sizeof($this->updateMessages)-1])); continue; } foreach($aRow as $sField => $mValue) { if(in_array($sField, $this->credaris_153)) { $aRow[$sField] = number_format($mValue, 2, ',', '.'); } else { $aRow[$sField] = htmlspecialchars_decode($mValue, ENT_QUOTES); } } $this->credaris_138[] = $aRow; $last_email = $aRow["email"]; } } return $this->credaris_138; } public function credaris_137() { $sugar_config = $GLOBALS["sugar_config"]; $current_user = $GLOBALS["current_user"]; $db = $GLOBALS["db"]; $skipped = 0; $logMsg = '--- BEGIN UPDATE SUGAR TO EVALANCHE (User: ' . $current_user->user_name . ') ---'; if($this->enableLogging) { $this->oLog->logMessage(Array('status'=>'D','direction'=>'I','text'=>$logMsg)); } if(!empty($this->credaris_138)) { if(sizeOf($this->credaris_138) > 50) { ini_set('max_execution_time', 0); ini_set('memory_limit', '-1'); } $oRequest = new K_EvalancheConnectorSOAP($this->aConnectionParams); if(!property_exists($this, 'updateMessages') || !is_array($this->updateMessages)) { $this->updateMessages = Array(); } foreach($this->credaris_138 as $aSugarRecord) { if(stristr("," . $sugar_config['K_EvalancheConnector']['Contacts']['ignore_email'] . ",", ',' . $aSugarRecord["email"] . ',')) { $skipped++; continue; } if(!trim($aSugarRecord["k_evalanche_id_c"])) { $profile_id = 0; try { $profile_id = $oRequest->credaris_127('create', Array( $sugar_config['K_EvalancheConnector']['Contacts']['pool_id_addto'], Array('items' => Array('item' => $this->credaris_144( Array( Array('key' => 'FIRSTNAME', 'value' => $aSugarRecord["first_name"]), Array('key' => 'NAME', 'value' => $aSugarRecord["last_name"]), Array('key' => 'EMAIL', 'value' => $aSugarRecord["email"]), Array('key' => 'SALUTATION', 'value' => $aSugarRecord["salutation"]), Array('key' => 'COMPANY', 'value' => $aSugarRecord["account_name"]), Array('key' => 'ADDRESS', 'value' => $aSugarRecord["primary_address_street"]), Array('key' => 'ZIPCODE', 'value' => $aSugarRecord["primary_address_postalcode"]), Array('key' => 'CITY', 'value' => $aSugarRecord["primary_address_city"]), Array('key' => 'COUNTRY', 'value' => $aSugarRecord['primary_address_country']), Array('key' => 'STATE', 'value' => $aSugarRecord['primary_address_state']), Array('key' => 'DELETED', 'value' => $aSugarRecord["opt_out"]), Array('key' => 'HARDBOUNCES', 'value' => $aSugarRecord["invalid_email"] ? 3:0), ), $aSugarRecord))) ) ); } catch(Exception $e) { $soapMessage = $e->getMessage(); $soapTitle = ''; $skipped++; if($soapMessage == "Unknown error") { $soapTitle = "title='Unknown error: this could be a fail of the email validation (example.com/org etc.)'"; $soapMessage .= "/email validation"; } $logMsg = 'SOAP-Exception: '.$soapMessage; if($this->enableLogging) { $this->oLog->logMessage(Array('status'=>'E','direction'=>'I','text'=>$logMsg." ".$this->getContactLink($aSugarRecord["id"],$aSugarRecord["main_type"]))); } $this->updateMessages[] = $this->lastUpdated.": <b style='color:#f00;' $soapTitle>SOAP-Exception happened - ".$soapMessage."</b> ".$this->getContactLink($aSugarRecord["id"],$aSugarRecord["main_type"]); } if($profile_id > 0) { $queryResultCstm = $GLOBALS['db']->query("select 1 from ".$aSugarRecord["main_type"]."s_cstm where id_c = '".$aSugarRecord["id"]."'"); if($GLOBALS['db']->fetchByAssoc($queryResultCstm)) { $GLOBALS['db']->query($sqi = "update ".$aSugarRecord["main_type"]."s_cstm set k_evalanche_id_c = '$profile_id', k_evalanche_error_c = 0, ". "k_evalanche_sync_c = 1, k_evalanche_state_c = 0 where id_c = '".$aSugarRecord["id"]."'"); } else { $GLOBALS['db']->query($sqi = "insert into ".$aSugarRecord["main_type"]."s_cstm (id_c, k_evalanche_id_c, k_evalanche_sync_c, k_evalanche_state_c, k_evalanche_error_c) ". "select '".$aSugarRecord["id"]."', '$profile_id', 1, 0, 0 "); } $logMsg = $aSugarRecord['first_name'].' '.$aSugarRecord['last_name'].' ('.$aSugarRecord['email'].') was created in Evalanche.'; if($this->enableLogging) $this->oLog->logMessage(Array('status'=>'C','direction'=>'I','text'=>$logMsg." ".$this->getContactLink($aSugarRecord["id"],$aSugarRecord["main_type"]))); } else { $queryResultCstm = $GLOBALS['db']->query("select 1 from ".$aSugarRecord["main_type"]."s_cstm where id_c = '".$aSugarRecord["id"]."'"); if($GLOBALS['db']->fetchByAssoc($queryResultCstm)) { $GLOBALS['db']->query("update ".$aSugarRecord["main_type"]."s_cstm set k_evalanche_error_c = 1, ". "k_evalanche_sync_c = 1, k_evalanche_state_c = 0 where id_c = '".$aSugarRecord["id"]."'"); } else { $GLOBALS['db']->query("insert into ".$aSugarRecord["main_type"]."s_cstm (id_c, k_evalanche_error_c, k_evalanche_sync_c, k_evalanche_state_c) ". "select '".$aSugarRecord["id"]."', 1, 1, 0 "); } } } else { $profile_ids = explode(",",trim($aSugarRecord["k_evalanche_id_c"])); foreach($profile_ids as $profile_id) { $updateOK = false; try { $updateOK = $oRequest->credaris_127('updateById', Array( $profile_id, Array('items' => Array('item' => ($evaSatz = $this->credaris_144( Array( Array('key' => 'FIRSTNAME', 'value' => $aSugarRecord["first_name"]), Array('key' => 'SALUTATION', 'value' => $aSugarRecord["salutation"]), Array('key' => 'NAME', 'value' => $aSugarRecord["last_name"]), Array('key' => 'EMAIL', 'value' => $aSugarRecord["email"]), Array('key' => 'COMPANY', 'value' => $aSugarRecord["account_name"]), Array('key' => 'ADDRESS', 'value' => $aSugarRecord["primary_address_street"]), Array('key' => 'ZIPCODE', 'value' => $aSugarRecord["primary_address_postalcode"]), Array('key' => 'CITY', 'value' => $aSugarRecord["primary_address_city"]), Array('key' => 'COUNTRY', 'value' => $aSugarRecord['primary_address_country']), Array('key' => 'STATE', 'value' => $aSugarRecord['primary_address_state']), Array('key' => 'DELETED', 'value' => $aSugarRecord["opt_out"]), Array('key' => 'HARDBOUNCES', 'value' => $aSugarRecord["invalid_email"] ? 3:0), ), $aSugarRecord)))) ) ); } catch(Exception $e) { $soapMessage = $e->getMessage(); $soapTitle = ''; $skipped++; if($soapMessage == "Unknown error") { $soapTitle = "title='Unknown error: this could be a fail of the email validation (example.com/org etc.)'"; $soapMessage .= "/email validation"; } $logMsg = 'SOAP-Exception: '.$soapMessage; if($this->enableLogging) $this->oLog->logMessage(Array('status'=>'E','direction'=>'I','text'=>$logMsg." ".$this->getContactLink($aSugarRecord["id"],$aSugarRecord["main_type"]))); $this->updateMessages[] = $this->lastUpdated.": <b style='color:#f00;' $soapTitle>SOAP-Exception happened - ".$soapMessage."</b> ".$this->getContactLink($aSugarRecord["id"],$aSugarRecord["main_type"]); } if($updateOK) { $GLOBALS['db']->query("update ".$aSugarRecord["main_type"]."s_cstm set k_evalanche_id_c = '$profile_id', k_evalanche_error_c = 0, ". "k_evalanche_sync_c = 1, k_evalanche_state_c = 0 where id_c = '".$aSugarRecord["id"]."'"); $logMsg = $aSugarRecord['first_name'].' '.$aSugarRecord['last_name'].' ('.$aSugarRecord['email'].') was updated to Evalanche.'; if($this->enableLogging) $this->oLog->logMessage(Array('status'=>'U','direction'=>'I','text'=>$logMsg." ".$this->getContactLink($aSugarRecord["id"],$aSugarRecord["main_type"]))); } else { $GLOBALS['db']->query("update ".$aSugarRecord["main_type"]."s_cstm set k_evalanche_error_c = 1, ". "k_evalanche_sync_c = 1, k_evalanche_state_c = 0 where id_c = '".$aSugarRecord["id"]."'"); } } } $modified = gmdate('Y-m-d H:i:s', time() + 5); $GLOBALS['db']->query("update ".$aSugarRecord["main_type"]."s set date_modified = '$modified' where id = '".$aSugarRecord["id"]."'"); } if(is_array($this->updateMessages)) { foreach($this->updateMessages as $updMsg) { $this->oView->renderActivity($updMsg); } } } $logMsg = '--- END UPDATE SUGAR TO EVALANCHE (User: ' . $current_user->user_name . ') ---'; if($this->enableLogging) $this->oLog->logMessage(Array('status'=>'D','direction'=>'I','text'=>$logMsg)); return $skipped; } public function credaris_140($campaign_id, $destination_pool = false, $sync_type = "Campaign") { if($destination_pool === false) { $sugar_config = $GLOBALS["sugar_config"]; $destination_pool = $sugar_config['K_EvalancheConnector']['Contacts']['pool_id']; if(strstr($destination_pool,",")) { $destination_pools = explode(",",$destination_pool); $result_arr = Array(); foreach($destination_pools as $destination_pool) { $result_arr[] = $this->credaris_140($campaign_id, $destination_pool, $sync_type); } return $result_arr; } } if($sync_type == "Campaign") { $targetField = "SUGARCAMPAIGN"; } else { $targetField = "SUGARPROSPECTLIST"; } if(!$this->RequestPoolObj) { $connParams = $this->aConnectionParams; $connParams['sEndpoint'] = 'Pool'; $this->RequestPoolObj = new K_EvalancheConnectorSOAP($connParams); } $myObj = $this->RequestPoolObj->credaris_127('getAttributes',$destination_pool); $attributeID = false; $optionID = false; $optionsArr = Array(); foreach($myObj->item as $myField) { if($myField->name == $targetField) { $attributeID = $myField->id; $optionsArr = $myField->options->item; break; } } if(!$attributeID) { $attributeObj = $this->RequestPoolObj->credaris_127("addAttribute",Array($destination_pool,$targetField,"SugarCRM $sync_type",8)); $attributeID = $attributeObj->id; } if(is_array($optionsArr) && count($optionsArr)>0) { if(!is_array($optionsArr) && is_object($optionsArr) && $optionsArr->value == "SUGARID: $campaign_id") { $optionID = $optionsArr->id; } else foreach($optionsArr as $optionObj) { if($optionObj->value == "SUGARID: $campaign_id") { $optionID = $optionObj->id; break; } } } if(!$optionID) { $optionObj = $this->RequestPoolObj->credaris_127("addAttributeOptions",Array($destination_pool,$attributeID,Array("SUGARID: $campaign_id"))); if(is_object($optionObj->options->item)) $optionID = $optionObj->options->item->id; else $optionID = $optionObj->options->item[count($optionObj->options->item)-1]->id; } return Array($attributeID,$optionID); } public function credaris_141($profile_ids, $option_id) { ini_set('max_execution_time', 0); ini_set('memory_limit', '-1'); if(!$this->RequestProfileObj) { $connParams = $this->aConnectionParams; $connParams['sEndpoint'] = 'Profile'; $this->RequestProfileObj = new K_EvalancheConnectorSOAP($connParams); } foreach($profile_ids as $profile_id) { try { $resultObj = $this->RequestProfileObj->credaris_127('tagWithOption',Array($option_id,Array($profile_id),"PROFILEID",false)); } catch (Exception $e) {} } return $resultObj; } public function credaris_142($category_id, $campaign_id, $attribute_id, $option_id, $destination_pool = false, $sync_type = "Campaign") { if($destination_pool === false) { $sugar_config = $GLOBALS["sugar_config"]; $destination_pool = $sugar_config['K_EvalancheConnector']['Contacts']['pool_id_addto']; } if(!$this->RequestTargetGroupObj) { $connParams = $this->aConnectionParams; $connParams['sEndpoint'] = 'Targetgroup'; $this->RequestTargetGroupObj = new K_EvalancheConnectorSOAP($connParams); } $campObj = new $sync_type(); $campObj->retrieve($campaign_id); try { if(!$campObj->k_evalanche_targetgroup_c) { $resTargetGroup = $this->RequestTargetGroupObj->credaris_127('createByOption',Array($destination_pool,$attribute_id,$option_id,$category_id,"SugarCRM $sync_type: ".$campObj->name." (".$campObj->id.")")); $campObj->k_evalanche_targetgroup_c = $resTargetGroup->id; $campObj->save(); return $resTargetGroup; } else return true; } catch(Exception $e) { return false; } } public function credaris_143() { $sugar_config = $GLOBALS["sugar_config"]; if(!property_exists($this, 'attributeRequestEvaObj') || !$this->attributeRequestEvaObj) { $connParams = $this->aConnectionParams; $connParams['sEndpoint'] = 'Pool'; $this->attributeRequestEvaObj = new K_EvalancheConnectorSOAP($connParams); $myObj = $this->attributeRequestEvaObj->credaris_127('getAttributes',$sugar_config['K_EvalancheConnector']['Contacts']['pool_id']); $relevantOptions = Array("SALUTATION", "COUNTRY", "STATE", "MOBILENETWORK", "FORM", "PERMISSION", "HARDBOUNCES", "USERSETSTATE", "LANGUAGE"); foreach($myObj->item as $myField) { if(in_array($myField->name,$relevantOptions) || $myField->type_id == 8 || $myField->type_id == 7) { $this->contactAttributesEva[$myField->name] = Array(); foreach($myField->options->item as $myoption) { $this->contactAttributesEva[$myField->name][$myoption->id] = $myoption->value; } } } } } public function credaris_144($convArray, $sugarData) { $sLog = "\r\n------------------------------------\r\n"; $sLog .= "credaris_144()\r\n"; $sLog .= "convArray:\r\n"; $sLog .= print_r($convArray, 1); $sLog .= "\r\n..............\r\n"; $sLog .= print_r($sugarData, 1); $sLog .= "\r\n..............\r\n"; $sugar_config = $GLOBALS["sugar_config"]; $sugarID = $sugarData['id']; $app_list_strings = $GLOBALS["app_list_strings"]; $db = $GLOBALS["db"]; if(!property_exists($this, 'attributeRequestObj') || !$this->attributeRequestObj) { $connParams = $this->aConnectionParams; $connParams['sEndpoint'] = 'Pool'; $this->attributeRequestObj = new K_EvalancheConnectorSOAP($connParams); $myObj = $this->attributeRequestObj->credaris_127('getAttributes',$sugar_config['K_EvalancheConnector']['Contacts']['pool_id']); $relevantOptions = Array("SALUTATION", "COUNTRY", "STATE", "MOBILENETWORK", "FORM", "PERMISSION", "HARDBOUNCES", "USERSETSTATE", "LANGUAGE"); foreach($myObj->item as $myField) { if(in_array($myField->name,$relevantOptions) || $myField->type_id == 8 || $myField->type_id == 7) { $this->contactAttributes[$myField->name] = Array(); foreach($myField->options->item as $myoption) { $this->contactAttributes[$myField->name][$myoption->value] = $myoption->id; } } } } foreach($convArray as $key => $columnArr) { switch($columnArr['key']) { case "SALUTATION": $aEnumSug = $app_list_strings['salutation_dom']; $aEnumEva = isset($this->contactAttributes["SALUTATION"]) ? $this->contactAttributes["SALUTATION"] : array(); $aSugarEnumSelected = array($convArray[$key]['value']); $aEvaEnumKeys = $this->credaris_145($aSugarEnumSelected, $aEnumSug, $aEnumEva, "SALUTATION"); $convArray[$key]['value'] = empty($aEvaEnumKeys) ? "" : $aEvaEnumKeys[0]; break; case "FIRSTNAME": case "NAME": case "EMAIL": case "ZIPCODE": case "CITY": $convArray[$key]['value'] = $columnArr['value']; break; case "ADDRESS": $convArray[$key]['value'] = $columnArr['value']; $ereg_num = "/([\d].*)$/"; if(preg_match($ereg_num,$columnArr['value'],$matches,PREG_OFFSET_CAPTURE)) { if($matches[0][1] > 0) { $convArray[$key]['value'] = trim(substr($columnArr['value'], 0, $matches[0][1])); $convArray[] = Array('key'=>'STREETNUMBER', 'value'=>trim($matches[0][0])); } } break; case 'COUNTRY': if (isset($this->contactAttributes['COUNTRY'][$columnArr['value']])) { $convArray[$key]['value'] = $this->contactAttributes['COUNTRY'][$columnArr['value']]; } else { $this->oView->renderActivity('WARNING: '. ucfirst($sugarData['main_type']) . ' ' . $sugarData['first_name'] . ' ' . $sugarData['last_name'] .': Content of field COUNTRY ('. $columnArr['value'] .') could not be mapped to a specific Evalanche option. Maybe a typo?'); if($this->enableLogging) { $this->oLog->logMessage(Array('status'=>'W','direction'=>'E','text'=>utf8_decode(ucfirst($sugarData['main_type']) . ' ' . $sugarData['first_name'] . ' ' . $sugarData['last_name'] .': Content of field COUNTRY ('. $columnArr['value'] .') could not be mapped to a specific Evalanche option. Maybe a typo?'))); } } break; case 'STATE': if (isset($this->contactAttributes['STATE'][$columnArr['value']])) { $convArray[$key]['value'] = $this->contactAttributes['STATE'][$columnArr['value']]; } else { $this->oView->renderActivity('WARNING: '. ucfirst($sugarData['main_type']) . ' ' . $sugarData['first_name'] . ' ' . $sugarData['last_name'] .': Content of field STATE ('. $columnArr['value'] .') could not be mapped to a specific Evalanche option. Maybe a typo.'); if($this->enableLogging) { $this->oLog->logMessage(Array('status'=>'W','direction'=>'E','text'=>utf8_decode(ucfirst($sugarData['main_type']) . ' ' . $sugarData['first_name'] . ' ' . $sugarData['last_name'] .': Content of field STATE ('. $columnArr['value'] .') could not be mapped to a specific Evalanche option. Maybe a typo?'))); } } break; case 'HARDBOUNCES': break; } } $this->lastUpdated = "$FIRSTNAME $NAME ($EMAIL)"; if(isset($sugar_config['K_EvalancheConnector']['Contacts']['mappings']) && is_array($sugar_config['K_EvalancheConnector']['Contacts']['mappings']) && count($sugar_config['K_EvalancheConnector']['Contacts']['mappings']) > 0) { $i = 0; foreach($sugar_config['K_EvalancheConnector']['Contacts']['mappings'] as $mappingPair) { if(!trim($mappingPair)) continue; $eva_val = ""; $mappingPair = explode(':',$mappingPair); $sFieldNameInEva = $mappingPair[1]; $sFieldNameInSug = $mappingPair[0]; if(!isset($this->aSugarFieldDefinitions[$sFieldNameInSug])) { $sLog .= "ERROR: Sugar field $sFieldNameInSug NOT EXISTS in aSugarFieldDefinitions \r\n"; continue; } $sFieldTypeInSug = $this->aSugarFieldDefinitions[$sFieldNameInSug]['type']; if(isset($this->aSugarFieldDefinitions[$sFieldNameInSug]['dbType']) && !empty($this->aSugarFieldDefinitions[$sFieldNameInSug]['dbType'])) { $sFieldTypeInSug = $this->aSugarFieldDefinitions[$sFieldNameInSug]['dbType']; } if($sugarData[$sFieldNameInSug] === "" && trim($sugar_config['K_EvalancheConnector']['Contacts']['mappingdefaults'][$i])) { $eva_val = $sugar_config['K_EvalancheConnector']['Contacts']['mappingdefaults'][$i]; } $sLog .= "MAP CUSTOM FIELD $sFieldNameInSug of type $sFieldTypeInSug in Sugar\r\n"; switch($sFieldTypeInSug) { case 'date': case 'datetime': case 'datetimecombo': $eva_val = strtotime($sugarData[$sFieldNameInSug]); break; case 'enum': case 'multienum': $sFieldExt1InSug = isset($this->aSugarFieldDefinitions[$sFieldNameInSug]['options']) ? $this->aSugarFieldDefinitions[$sFieldNameInSug]['options'] : 'dummy_options_not_exist'; $aEnumEva = isset($this->contactAttributes[$sFieldNameInEva]) ? $this->contactAttributes[$sFieldNameInEva] : array(); $aEnumSug = isset($app_list_strings[$sFieldExt1InSug]) ? $app_list_strings[$sFieldExt1InSug] : array(); $aSugarEnumSelected = array(); if($sFieldTypeInSug == "enum") { $aSugarEnumSelected = array($sugarData[$sFieldNameInSug]); } else { $aTemp = explode('^,^', $sugarData[$sFieldNameInSug]); foreach($aTemp as $sEnumKeySug) { $aSugarEnumSelected[] = str_replace('^', '', $sEnumKeySug); } } $aEvaEnumKeys = $this->credaris_145($aSugarEnumSelected, $aEnumSug, $aEnumEva, $sFieldNameInEva); if($sFieldTypeInSug == "multienum") { if(empty($aEvaEnumKeys)) { $eva_val = ''; } else { $eva_val = '|' . implode('|', $aEvaEnumKeys) . '|'; } } else { if(empty($aEvaEnumKeys)) { if(!empty($sugar_config['K_EvalancheConnector']['Contacts']['mappingdefaults'][$i])) { $sDefaultLabel = $sugar_config['K_EvalancheConnector']['Contacts']['mappingdefaults'][$i]; if(isset($aEnumEva[$sDefaultLabel])) { $aEvaEnumKeys[] = $aEnumEva[$sDefaultLabel]; } } } $eva_val = empty($aEvaEnumKeys) ? '' : $aEvaEnumKeys[0]; } break; case 'relate': if($sFieldNameInSug == 'assigned_user_name') { $eva_val = $sugarData['assigned_user_full_name']; } break; case 'bool': case 'int': case 'text': case 'varchar': default: $eva_val = $sugarData[$sFieldNameInSug]; break; } if($this->sCustomerId == 'Y3421CH141') { if( ($sFieldNameInSug == 'dotb_gender_id') || ($sFieldNameInSug == 'dotb_gender_id_c') ) { $sFieldNameInEva = 'SALUTATION'; switch($sugarData[$sFieldNameInSug]) { case 'm': $eva_val = 2; break; case 'f': $eva_val = 1; break; default: $eva_val = 0; break; } } } $convArray[] = Array('key' => $sFieldNameInEva, 'value' => $eva_val); $i++; } } if($this->bLogDebugSugToEva) { $sLog .= "\r\nRETURN TO EVALANCHE:\r\n"; $sLog .= print_r($convArray, 1); $this->writeDebugSugToEva($sLog); } return $convArray; } public function credaris_145($aSugarEnumSelected, $aEnumSug, $aEnumEva, $sFieldNameInEva) { $aReturn = array(); $sLog = "\r\nGET EVA ENUM KEYS\r\n"; $sLog .= print_r($aSugarEnumSelected, 1) . "\r\n"; $sLog .= print_r($aEnumSug, 1) . "\r\n"; $sLog .= print_r($aEnumEva, 1) . "\r\n"; foreach($aSugarEnumSelected as $sEnumKeySug) { $sEnumLabelSug = isset($aEnumSug[$sEnumKeySug]) ? $aEnumSug[$sEnumKeySug] : ""; if(empty($sEnumLabelSug)) { continue; } $sLog .= "SUGAR LABEL:       $sEnumLabelSug \r\n"; if(isset($aEnumEva[$sEnumLabelSug])) { $aReturn[] = $aEnumEva[$sEnumLabelSug]; } else { if($this->enableLogging) { $this->oLog->logMessage(Array('status'=>'W','direction'=>'E','text'=>'Mapping of ' . $sFieldNameInEva . ' field: option "' . $sEnumLabelSug . '" not available in Evalanche')); } } } return $aReturn; } public function credaris_146($aEnumKeysEva, $aEnumEva, $aEnumSug, $sFieldNameInSug) { $aReturn = array(); $sLog = "\r\nGET SUGAR ENUM KEYS\r\n"; $sLog .= print_r($aEnumKeysEva, 1) . "\r\n"; $sLog .= print_r($aEnumEva, 1) . "\r\n"; $sLog .= print_r($aEnumSug, 1) . "\r\n"; foreach($aEnumKeysEva as $iKeyEvaSelected) { if(!isset($aEnumEva[$iKeyEvaSelected])) { continue; } $sLabelEva = $aEnumEva[$iKeyEvaSelected]; $sLog .= "EVA LABEL:       $sLabelEva \r\n"; $bFound = false; foreach($aEnumSug as $sKeySug => $sLabelSug) { if($sLabelSug === $sLabelEva) { $aReturn[] = $sKeySug; $bFound = true; break; } } if(!$bFound) { if($this->enableLogging) { $this->oLog->logMessage(Array('status'=>'W','direction'=>'I','text'=>'Mapping of ' . $sFieldNameInSug . ' field: option "' . $sLabelEva . '" not available in SugarCRM')); } } } return $aReturn; } public function credaris_147s($bReload=false) { $this->loadRecordsFromEvalanche($bReload); $this->loadUnsubscriptionsFromEvalanche(); } public function credaris_147($oProperties) { $db = $GLOBALS["db"]; $app_list_strings = $GLOBALS["app_list_strings"]; $bPrimaryId = false; $aRecord = array(); $sugar_config = $GLOBALS["sugar_config"]; if(!property_exists($this, 'attributeRequestEvaObj') || !$this->attributeRequestEvaObj) { $this->credaris_143(); } foreach($oProperties as $oProperty) { $sFieldNameInEva = $oProperty->key; switch($sFieldNameInEva) { case 'PROFILEID': $bPrimaryId = true; $aRecord['k_evalanche_id'] = $oProperty->value; break; case 'CHANGE_DATE': $aRecord['date_modified'] = date('Y-m-d H:i:s', $oProperty->value); $aRecord['iChangeDateInEvalanche'] = $oProperty->value; break; case 'UNSUBSCRIBE_DATE': $aRecord['unsubscribe_date'] = date('Y-m-d H:i:s', $oProperty->value); $aRecord['iUnsubscribeDateInEvalanche'] = $oProperty->value; break; case 'SALUTATION': $aEnumEva = isset($this->contactAttributesEva["SALUTATION"]) ? $this->contactAttributesEva["SALUTATION"] : array(); $aEnumSug = isset($GLOBALS["app_list_strings"]['salutation_dom']) ? $GLOBALS["app_list_strings"]['salutation_dom'] : array(); $aSelectedEnum = $this->credaris_146(array($oProperty->value), $aEnumEva, $aEnumSug, "Salutation"); $aRecord['salutation'] = empty($aSelectedEnum) ? "" : $aSelectedEnum[0]; break; case 'EMAIL': if(empty($oProperty->value)) { return; } if(stristr("," . $sugar_config['K_EvalancheConnector']['Contacts']['ignore_email'] . ",", ',' . $oProperty->value . ',')) { return; } $aRecord[$this->credaris_150['EMAIL']] = $oProperty->value; break; case 'ADDRESS': $aRecord['primary_address_street'] = strlen($aRecord['primary_address_street']) ? $oProperty->value . ' ' . $aRecord['primary_address_street'] : $oProperty->value; break; case 'STREETNUMBER': $aRecord['primary_address_street'] = strlen($aRecord['primary_address_street']) ? $aRecord['primary_address_street'] . ' ' . $oProperty->value : $oProperty->value; break; case 'HARDBOUNCES': if(is_numeric($oProperty->value) && ($oProperty->value == 3)) { $aRecord['invalid_email'] = 1; } else { $aRecord['invalid_email'] = 0; } break; case 'COUNTRY': $countryValue = $this->contactAttributesEva[$sFieldNameInEva][$oProperty->value]; if (!empty($countryValue)) { $aRecord['primary_address_country'] = $countryValue; } break; case 'STATE': $stateValue = $this->contactAttributesEva[$sFieldNameInEva][$oProperty->value]; if (!empty($stateValue)) { $aRecord['primary_address_state'] = $stateValue; } break; default: if(!isset($this->credaris_150[$sFieldNameInEva])) { $sLog .= "ERROR: Eva field $sFieldNameInEva NOT EXISTS in credaris_150 \r\n"; continue; } $sFieldNameInSug = $this->credaris_150[$sFieldNameInEva]; if(!isset($this->aSugarFieldDefinitions[$sFieldNameInSug])) { switch($sFieldNameInEva) { case "DELETED": $aRecord['opt_out'] = $oProperty->value; break; default: $sLog .= "ERROR: Sugar field $sFieldNameInSug NOT EXISTS in aSugarFieldDefinitions \r\n"; } continue; } $aRecord[$sFieldNameInSug] = $oProperty->value; $sFieldTypeInSug = $this->aSugarFieldDefinitions[$sFieldNameInSug]['type']; if(isset($this->aSugarFieldDefinitions[$sFieldNameInSug]['dbType']) && !empty($this->aSugarFieldDefinitions[$sFieldNameInSug]['dbType'])) { $sFieldTypeInSug = $this->aSugarFieldDefinitions[$sFieldNameInSug]['dbType']; } if(isset($this->contactAttributesEva[$sFieldNameInEva])) { $sLog .= "FIELD TYPE of field $sFieldNameInEva: ENUM OR MULTIENUM!!\r\n"; $sFieldExt1InSug = $this->aSugarFieldDefinitions[$sFieldNameInSug]['options']; $aEnumEva = $this->contactAttributesEva[$sFieldNameInEva]; $aEnumSug = isset($app_list_strings[$sFieldExt1InSug]) ? $app_list_strings[$sFieldExt1InSug] : array(); $oProperty->value = explode('|',$oProperty->value); if(count($oProperty->value) > 1) { array_shift($oProperty->value); array_pop($oProperty->value); } $aSelectedEnum = $this->credaris_146($oProperty->value, $aEnumEva, $aEnumSug, $sFieldNameInSug); if($sFieldTypeInSug == "multienum") { $aRecord[$sFieldNameInSug] = empty($aSelectedEnum) ? '' : '^' . implode('^,^', $aSelectedEnum) . '^'; } else { if(empty($aSelectedEnum)) { if(isset($sugar_config['K_EvalancheConnector']['Contacts']['mappings'])) { foreach($sugar_config['K_EvalancheConnector']['Contacts']['mappings'] as $iLoop => $sMapping) { $aTemp = explode(":", $sMapping); if($aTemp[0] == $sFieldNameInSug) { if(isset($sugar_config['K_EvalancheConnector']['Contacts']['mappingdefaults'][$iLoop]) && !empty($sugar_config['K_EvalancheConnector']['Contacts']['mappingdefaults'][$iLoop])) { $sDefaultLabel = $sugar_config['K_EvalancheConnector']['Contacts']['mappingdefaults'][$iLoop]; foreach($aEnumSug as $sKeySug => $sLabelSug) { if($sLabelSug === $sDefaultLabel) { $aSelectedEnum[] = $sKeySug; break; } } } } } } } $aRecord[$sFieldNameInSug] = empty($aSelectedEnum) ? '' : $aSelectedEnum[0]; } } else { $sLog .= "FIELD TYPE of field $sFieldNameInEva is $sFieldTypeInSug in Sugar\r\n"; switch($sFieldTypeInSug) { case 'date': $aRecord[$sFieldNameInSug] = gmdate("Y-m-d", $oProperty->value); break; case 'datetime': case 'datetimecombo': $aRecord[$sFieldNameInSug] = gmdate("Y-m-d H:i:s", $oProperty->value); break; case 'bool': case 'int': case 'text': case 'varchar': break; } } break; } } if($bPrimaryId) { $this->aExternalRecords[] = $aRecord; } } public function buildUnsubscriptionRecord($oProperties) { $aRecord = array(); foreach($oProperties as $oProperty) { $sFieldNameInEva = $oProperty->key; switch ($sFieldNameInEva) { case 'PROFILEID': $aRecord['k_evalanche_id'] = $oProperty->value; break; case 'EMAIL': $aRecord['email'] = $oProperty->value; break; } } $this->aUnsubscriptions[] = $aRecord; } private function loadUnsubscriptionsFromEvalanche() { global $sugar_config, $timedate; if (empty($timedate)) { $timedate = TimeDate::getInstance(); } if (empty($this->aUnsubscriptions)) { $this->aUnsubscriptions = array(); } $iTimeStart = microtime(true); if($this->enableLogging) { $this->oLog->logMessage(Array('status'=>'I','direction'=>'I','text'=>'Starting connection to Evalanche for unsubscribed profiles...')); } $lastUnsubscriptionSyncDate = $this->oLog->getLastSyncDate(NULL, TRUE); $oDateDB = new DateTime($lastUnsubscriptionSyncDate, new DateTimeZone('UTC')); $start_time = $oDateDB->getTimestamp(); if(isset($sugar_config['K_EvalancheConnector']['Contacts']['eva_time_offset'])) { $start_time += intval($sugar_config['K_EvalancheConnector']['Contacts']['eva_time_offset']); } $this->oView->renderActivity('Starting connection to Evalanche for unsubscribed profiles...'); $oRequest = new K_EvalancheConnectorSOAP($this->aConnectionParams); $this->oView->renderActivity('Requesting unsubscriptions from Evalanche newer than last unsubscription sync-date (UTC): ' . $lastUnsubscriptionSyncDate . ' (' . $start_time . ')'); if($this->enableLogging) { $this->oLog->logMessage(Array('status'=>'I','direction'=>'I','text'=>'Requesting unsubscriptions from Evalanche newer than last unsubscription sync-date (UTC): ' . $lastUnsubscriptionSyncDate . ' (' . $start_time . ')')); } $idArray = explode(',',$this->aRequestParams['id']); foreach($idArray as $requestID) { $preRequestArray = Array ( $requestID, $start_time, 0, array('PROFILEID', 'EMAIL')); $oResponse = $oRequest->credaris_127('getUnsubscriptions', $preRequestArray); if(!property_exists($oResponse, 'item')) { $oResponse->item = array(); } if(is_array($oResponse->item)) { foreach($oResponse->item as $oResult) { $this->buildUnsubscriptionRecord($oResult->items->item); } } else if(is_object($oResponse->item)) { $oResult = $oResponse->item; $this->buildUnsubscriptionRecord($oResult->items->item); } } $this->oView->renderActivity(sizeOf($this->aUnsubscriptions) . ' unsubscribed profiles successfully read from Evalanche in ' . (microtime(true) - $iTimeStart) . ' seconds'); return $this->aUnsubscriptions; } private function loadRecordsFromEvalanche($bReload=false) { $sugar_config = $GLOBALS["sugar_config"]; $db = $GLOBALS["db"]; global $timedate; if (empty($timedate)) { $timedate=TimeDate::getInstance(); } if(empty($this->aExternalRecords) || $bReload) { $this->aExternalRecords = array(); $iTimeStart = microtime(true); $aResultSets = array(); if($this->enableLogging) { $this->oLog->logMessage(Array('status'=>'I','direction'=>'I','text'=>'Starting connection to Evalanche ...')); } $syncDate = $this->oLog->getLastSyncDate(); $oDateDB = new DateTime($syncDate, new DateTimeZone('UTC')); $start_time = $oDateDB->getTimestamp(); if(isset($sugar_config['K_EvalancheConnector']['Contacts']['eva_time_offset'])) { $start_time += intVal($sugar_config['K_EvalancheConnector']['Contacts']['eva_time_offset']); } $this->oView->renderActivity('Starting connection to Evalanche ...'); $oRequest = new K_EvalancheConnectorSOAP($this->aConnectionParams); $this->oView->renderActivity('Requesting data from Evalanche newer than last sync-date (UTC): ' . $syncDate . ' (' . $start_time . ')'); if($this->enableLogging) { $this->oLog->logMessage(Array('status'=>'I','direction'=>'I','text'=>'Requesting data from Evalanche newer than last sync-date (UTC): ' . $syncDate . ' (' . $start_time . ')')); } $idArray = explode(',',$this->aRequestParams['id']); foreach($idArray as $requestID) { $preRequestArray = Array ( $requestID, $this->aRequestParams['array'], $start_time ); $oResponse= $oRequest->credaris_127('getModifiedProfiles', $preRequestArray); if(!property_exists($oResponse, 'item')) { $oResponse->item = array(); } if(is_array($oResponse->item)) { foreach($oResponse->item as $oResult) { if(is_array($oResult->items->item)){ $this->credaris_147($oResult->items->item); $this->aExternalRecords[sizeof($this->aExternalRecords)-1]['pool_id'] = $requestID; } } } else if(is_object($oResponse->item)) { $oResult = $oResponse->item; if(is_array($oResult->items->item)){ $this->credaris_147($oResult->items->item); $this->aExternalRecords[sizeof($this->aExternalRecords)-1]['pool_id'] = $requestID; } } } $this->oView->renderActivity(sizeOf($this->aExternalRecords) . ' successfully read from Evalanche in ' . (microtime(true) - $iTimeStart) . ' seconds'); } return $this->aExternalRecords; } public function updateRecords($sHTML="") { $sLog = "UPDATE RECORDS FROM EVALANCHE TO SUGAR\r\n"; $sLog .= date("Y-m-d H:i:s") . "\r\n"; $skipped = 0; $db = $GLOBALS["db"]; $sugar_config = $GLOBALS["sugar_config"]; $current_user = $GLOBALS["current_user"]; $iTimeStart = microtime(true); $aResultSets = array(); global $timedate; if (empty($timedate)) { $timedate=TimeDate::getInstance(); } $this->loadRecordsFromEvalanche(true); $this->loadUnsubscriptionsFromEvalanche(); $sLog .= sizeof($this->aExternalRecords) . " records loaded from Evalanche at " . date("Y-m-d H:i:s") . "\r\n"; $newSyncDate = $timedate->nowDb(); $sLog .= "new time for next request: $newSyncDate \r\n"; $sSql = "SHOW tables like 'k_connector_syncdates'"; $oResult = $GLOBALS['db']->query($sSql); $bTableAvailable = false; while($aRow = $GLOBALS['db']->fetchByAssoc($oResult)) { $sLog .= print_r($aRow, 1) . "\r\n"; $bTableAvailable = true; } if($bTableAvailable) { $sLog .= "TABLE SYNCDATES AVAILABLE\r\n"; $sSql = "SELECT * from k_connector_syncdates"; $oResult = $GLOBALS['db']->query($sSql); while($aRow = $GLOBALS['db']->fetchByAssoc($oResult)) { $sLog .= $aRow['plugin'] . ": " . $aRow['syncdate'] . "\r\n"; } } else { $sLog .= "TABLE SYNCDATES NOT AVAILABLE\r\n"; } if($this->enableLogging) { } if(!empty($this->aExternalRecords)) { $logMsg = '--- BEGINN UPDATE EVALANCHE TO SUGAR (User: ' . $current_user->user_name . ') ---'; if($this->enableLogging) { $this->oLog->logMessage(Array('status'=>'D','direction'=>'I','text'=>$logMsg)); } foreach($this->aExternalRecords as $externalRecord) { $skipped += ($this->credaris_148($externalRecord) ? 0 : 1); } $logMsg = '--- ENDE UPDATE EVALANCHE TO SUGAR (User: ' . $current_user->user_name . ') ---'; if($this->enableLogging) { $this->oLog->logMessage(Array('status'=>'D','direction'=>'I','text'=>$logMsg)); } } if (!empty($this->aUnsubscriptions)) { $logMsg = '--- BEGINN UPDATE UNSUBSCRIPTIONS TO SUGAR (User: ' . $current_user->user_name . ') ---'; if ($this->enableLogging) { $this->oLog->logMessage(Array('status'=>'D','direction'=>'I','text'=>$logMsg)); } foreach ($this->aUnsubscriptions as $aUnsubscription) { $skipped += ($this->updateUnsubscriptionToSugar($aUnsubscription) ? 0 : 1); } if ($this->enableLogging) { $this->oLog->logMessage( array( 'status' => 'I', 'direction'=>'I', 'text' => sizeof($this->aUnsubscriptions)-$skipped . ' Unsubscriptions have been made to Sugar', ) ); } $logMsg = '--- ENDE UPDATE UNSUBSCRIPTIONS TO SUGAR (User: ' . $current_user->user_name . ') ---'; if($this->enableLogging) { $this->oLog->logMessage(Array('status'=>'D','direction'=>'I','text'=>$logMsg)); } } $sOldSyncDate = $this->oLog->getLastSyncDate(); $sLog .= "before update DB: $sOldSyncDate \r\n"; $this->oLog->setLastSyncDate($newSyncDate); $this->oLog->setLastUnsubscriptionSyncDate($newSyncDate); $sNewSyncDate = $this->oLog->getLastSyncDate(); $sLog .= "after update DB: $sNewSyncDate \r\n"; $this->writeDebugEvaToSug($sLog); return $skipped; } public function updateUnsubscriptionToSugar($aProfile) { global $db; $sUnionSQL = "SELECT id_c, 'contact' main_type ". "FROM contacts_cstm WHERE CONCAT(',',k_evalanche_id_c,',') LIKE '%," . $aProfile['k_evalanche_id'] . ",%' ". "AND 0 < (SELECT COUNT(*) from contacts WHERE id = contacts_cstm.id_c AND deleted=0) UNION ". "SELECT id_c, 'lead' main_type FROM leads_cstm WHERE CONCAT(',',k_evalanche_id_c,',') LIKE '%," . $aProfile['k_evalanche_id'] . ",%' ". "AND 0 < (SELECT COUNT(*) FROM leads WHERE id = leads_cstm.id_c AND deleted=0) "; $unionResult = $db->query($sUnionSQL); $iNumberOfUpdatedProfiles = 0; while ($aRow = $db->fetchByAssoc($unionResult)) { $updateSQL = "UPDATE email_addresses SET opt_out = '1' ". "WHERE deleted = 0 ". "AND email_address = '". $aProfile['email'] ."' ". "AND opt_out = '0' ". "AND id IN ". "(SELECT eabr.email_address_id ". "FROM email_addr_bean_rel eabr ". "WHERE eabr.bean_id = '". $aRow['id_c'] ."' AND eabr.deleted = 0)"; $result = $db->query($updateSQL); if ($result) { $iNumberOfUpdatedProfiles++; } } return (bool) $iNumberOfUpdatedProfiles; } public function credaris_148($contactObj) { $sugar_config = $GLOBALS["sugar_config"]; $db = $GLOBALS["db"]; if($sugar_config['K_EvalancheConnector']['Contacts']['main_type'] != "lead") { $contact = new Contact(); $contact_sort = 1; $lead_sort = 2; } else { $contact = new Lead(); $lead_sort = 1; $contact_sort = 2; } $addContactClause = ""; $addLeadClause = ""; if($sugar_config['K_EvalancheConnector']['Contacts']['sync_type'] == "lead") { $addContactClause = " and 1=0 "; } if($sugar_config['K_EvalancheConnector']['Contacts']['sync_type'] == "contact" || !isset($sugar_config['K_EvalancheConnector']['Contacts']['sync_type']) ) { $addLeadClause = " and 1=0 "; } $eva_id = $contactObj["k_evalanche_id"]; if($sugar_config['K_EvalancheConnector']['Contacts']['ignore_leads'] == '1') { $addLClause = 'and (leads.contact_id is null OR leads.contact_id="") '; } else { $addLClause = ''; } $queryResult = $db->query("select id_c, 'contact' main_type, $contact_sort sort from contacts_cstm where concat(',',k_evalanche_id_c,',') like '%,".$eva_id.",%' ". "and 0 < (select count(*) from contacts where id = contacts_cstm.id_c and deleted=0) $addContactClause UNION ". "select id_c, 'lead' main_type, $lead_sort sort from leads_cstm where concat(',',k_evalanche_id_c,',') like '%,".$eva_id.",%' ". "and 0 < (select count(*) from leads where id = leads_cstm.id_c and deleted=0 $addLClause) $addLeadClause ". "ORDER BY sort"); $aRow = $db->fetchByAssoc($queryResult); $matchMail = false; if($sugar_config['K_EvalancheConnector']['Contacts']['merge_emails'] == '1' && !$aRow) { $sql_mail = "select c.id id_c, count(distinct c.id) anz
            from email_addresses ea, email_addr_bean_rel eabr, contacts c
            where ea.deleted = 0 and ea.email_address = '".$contactObj["email"]."'
            and eabr.email_address_id = ea.id and eabr.deleted = 0 and eabr.bean_module = 'Contacts'
            and eabr.bean_id = c.id and c.deleted = 0"; $result_mail = $db->query($sql_mail); $zeile_mail = $db->fetchByAssoc($result_mail); if($sugar_config['K_EvalancheConnector']['Contacts']['ignore_leads']=='1') { $addLeadC = " and (c.contact_id is null OR c.contact_id='') "; } else { $addLeadC = ''; } $sql_mail2 = "select c.id id_c, count(distinct c.id) anz
            from email_addresses ea, email_addr_bean_rel eabr, leads c
            where ea.deleted = 0 and ea.email_address = '".$contactObj["email"]."'
            and eabr.email_address_id = ea.id and eabr.deleted = 0 and eabr.bean_module = 'Leads'
            and eabr.bean_id = c.id and c.deleted = 0 $addLeadC"; $result_mail2 = $db->query($sql_mail2); $zeile_mail2 = $db->fetchByAssoc($result_mail2); if($zeile_mail["anz"]==1 && $sugar_config['K_EvalancheConnector']['Contacts']['sync_type'] != "lead") { $contact = new Contact(); $contact->retrieve($zeile_mail["id_c"]); $matchMail = true; $contact->k_evalanche_id_c = array_unique(array_merge(explode(',',$contact->k_evalanche_id_c),array($contactObj["k_evalanche_id"]))); for($i=count($contact->k_evalanche_id_c)-1; $i>=0 ;$i--) { if($contact->k_evalanche_id_c[$i] == false) { unset($contact->k_evalanche_id_c[$i]); } } $contact->k_evalanche_id_c = implode(',',$contact->k_evalanche_id_c); $contact->save(); $this->updateMessages[] = $contactObj["first_name"]." ".$contactObj["last_name"]." (".$contactObj["email"]."): contact with matching email found... contacts merged. ".$this->getContactLink($aRow["id_c"]); if($this->enableLogging) $this->oLog->logMessage(Array('status'=>'I','direction'=>'I','text'=>$this->updateMessages[sizeof($this->updateMessages)-1])); } if($zeile_mail2["anz"]==1 && $sugar_config['K_EvalancheConnector']['Contacts']['sync_type'] != "contact" && isset($sugar_config['K_EvalancheConnector']['Contacts']['sync_type'])) { $contact = new Lead(); $contact->retrieve($zeile_mail2["id_c"]); $matchMail = true; $contact->k_evalanche_id_c = array_unique(array_merge(explode(',',$contact->k_evalanche_id_c),array($contactObj["k_evalanche_id"]))); for($i=count($contact->k_evalanche_id_c)-1; $i>=0 ;$i--) { if($contact->k_evalanche_id_c[$i] == false) { unset($contact->k_evalanche_id_c[$i]); } } $contact->k_evalanche_id_c = implode(',',$contact->k_evalanche_id_c); $contact->save(); $this->updateMessages[] = $contactObj["first_name"]." ".$contactObj["last_name"]." (".$contactObj["email"]."): lead with matching email found... leads merged. ".$this->getContactLink($aRow["id_c"],"Leads"); if($this->enableLogging) $this->oLog->logMessage(Array('status'=>'I','direction'=>'I','text'=>$this->updateMessages[sizeof($this->updateMessages)-1])); } if($matchMail == false && ($zeile_mail["anz"]>0 && $sugar_config['K_EvalancheConnector']['Contacts']['sync_type'] != "lead" || $zeile_mail2["anz"]>0&& $sugar_config['K_EvalancheConnector']['Contacts']['sync_type'] != "contact" && isset($sugar_config['K_EvalancheConnector']['Contacts']['sync_type']) )) { $this->updateMessages[] = $contactObj["first_name"]." ".$contactObj["last_name"]." (".$contactObj["email"]."): merging contacts/leads failed... duplicate contact/lead with matching email found."; if($this->enableLogging) $this->oLog->logMessage(Array('status'=>'E','direction'=>'I','text'=>$this->updateMessages[sizeof($this->updateMessages)-1])); return false; } } $sql_mail = "select c.id id_c, count(distinct c.id) anz
        from email_addresses ea, email_addr_bean_rel eabr, contacts c
        where ea.deleted = 0 and ea.email_address = '".$contactObj["email"]."'
        and eabr.email_address_id = ea.id and eabr.deleted = 0 and eabr.bean_module = 'Contacts'
        and eabr.bean_id = c.id and c.deleted = 0"; $result_mail = $db->query($sql_mail); $zeile_mail = $db->fetchByAssoc($result_mail); if($sugar_config['K_EvalancheConnector']['Contacts']['ignore_leads']=='1') { $addLeadC = " and (c.contact_id is null OR c.contact_id='') "; } else { $addLeadC = ''; } $sql_mail2 = "select c.id id_c, count(distinct c.id) anz
        from email_addresses ea, email_addr_bean_rel eabr, leads c
        where ea.deleted = 0 and ea.email_address = '".$contactObj["email"]."'
        and eabr.email_address_id = ea.id and eabr.deleted = 0 and eabr.bean_module = 'Leads'
        and eabr.bean_id = c.id and c.deleted = 0 $addLeadC"; $result_mail2 = $db->query($sql_mail2); $zeile_mail2 = $db->fetchByAssoc($result_mail2); if( $zeile_mail["anz"]>1 && $sugar_config['K_EvalancheConnector']['Contacts']['sync_type'] != "lead" || $zeile_mail2["anz"]>1 && $sugar_config['K_EvalancheConnector']['Contacts']['sync_type'] != "contact" && isset($sugar_config['K_EvalancheConnector']['Contacts']['sync_type'])) { if($this->sCustomerId != 'Y3421CH141') { $this->updateMessages[] = $contactObj["first_name"]." ".$contactObj["last_name"]." (".$contactObj["email"]."): duplicate contacts/leads with matching email address ".$contactObj["email"]." found... Sync. skipped."; if($this->enableLogging) $this->oLog->logMessage(Array('status'=>'E','direction'=>'I','text'=>$this->updateMessages[sizeof($this->updateMessages)-1])); return false; } } if($sugar_config['K_EvalancheConnector']['Contacts']['ignore_leads']=='1') { $addLeadC = " and (leads.contact_id is null OR leads.contact_id='') "; } else { $addLeadC = ''; } $sLog = "\r\n\r\n===================================\r\n"; $sSql = "select id_c, 'contact' main_type, $contact_sort sort from contacts_cstm where concat(',',k_evalanche_id_c,',') like '%,".$eva_id.",%' ". "and 0 < (select count(*) from contacts where id = contacts_cstm.id_c and deleted=0) $addContactClause UNION ". "select id_c, 'lead' main_type, $lead_sort sort from leads_cstm where concat(',',k_evalanche_id_c,',') like '%,".$eva_id.",%' ". "and 0 < (select count(*) from leads where id = leads_cstm.id_c and deleted=0 $addLeadC) $addLeadClause ". "ORDER BY sort"; $queryResult = $db->query($sSql); $aRow = $db->fetchByAssoc($queryResult); $confirm_updated_data = false; do { $isLead = false; $newContact = false; if($aRow) { if($aRow["main_type"] == "lead") { $contact = new Lead(); $isLead = true; } else { $contact = new Contact(); } $contact->retrieve($aRow["id_c"]); $eva_modified = $contactObj["iChangeDateInEvalanche"]; $eva_unsubscribed = $contactObj['iUnsubscribeDateInEvalanche']; $sugar_modified = (isset($contact->fetched_row['date_modified']) && !empty($contact->fetched_row['date_modified'])) ? $contact->fetched_row['date_modified'] : $contact->date_modified; $oDateDB = new DateTime($sugar_modified, new DateTimeZone('UTC')); $sugar_modified = $oDateDB->getTimestamp(); if(isset($sugar_config['K_EvalancheConnector']['Contacts']['eva_time_offset'])) { $sugar_modified += intVal($sugar_config['K_EvalancheConnector']['Contacts']['eva_time_offset']); } $sLog .= "modified in Eva: $eva_modified \r\n"; $sLog .= "modified in Sug: $sugar_modified \r\n"; if($sugar_config['K_EvalancheConnector']['Contacts']['master'] == 'eva') { $update_allowed = $eva_modified >= $sugar_modified; $sLog .= "MASTER: Eva ... update = " . (($update_allowed) ? " true\r\n" : " false\r\n"); } else { $update_allowed = $eva_modified > $sugar_modified; $sLog .= "MASTER: Sug ... update = " . (($update_allowed) ? " true\r\n" : " false\r\n"); } if(!$update_allowed) { $this->updateMessages[] = $contactObj["first_name"]." ".$contactObj["last_name"]." (".$contactObj["email"]."): sugar modified date ($sugar_modified UTC) is newer than evalanche ($eva_modified UTC) => no sync ".$this->getContactLink($aRow["id_c"]); if($this->enableLogging) $this->oLog->logMessage(Array('status'=>'I','direction'=>'I','text'=>$this->updateMessages[sizeof($this->updateMessages)-1])); continue; } } else { if($this->sCustomerId == 'Y3421CH141') { continue; } if($sugar_config['K_EvalancheConnector']['Contacts']['main_type'] == "lead") { $isLead = true; } $newContact = true; $contact->k_evalanche_id_c = $contactObj["k_evalanche_id"]; if($contactObj["pool_id"] == $sugar_config['K_EvalancheConnector']['Contacts']['pool_id_lead']) { $contact->description = $this->credaris_152; } } if($this->sCustomerId != 'Y3421CH141') { $contact->salutation = $contactObj["salutation"]; $contact->first_name = $contactObj["first_name"]; $contact->last_name = $contactObj["last_name"]; $contact->primary_address_street = $contactObj["primary_address_street"]; $contact->primary_address_postalcode = $contactObj["primary_address_postalcode"]; $contact->primary_address_city = $contactObj["primary_address_city"]; $contact->primary_address_country = $contactObj['primary_address_country']; $contact->primary_address_state = $contactObj['primary_address_state']; } $contact->email1 = $contactObj["email"]; $contact->invalid_email = ($contactObj["invalid_email"] == 1 ? true : false); $updateMessageGenerated = false; if($isLead) { $contactObj["account_name"] = trim($contactObj["account_name"]); if(empty($contactObj["account_name"])) { $current_language = $GLOBALS["current_language"]; if(stristr($current_language,"de_") || stristr($current_language,"ge_")) { $contactObj["account_name"] = "Unbekannt"; } else { $contactObj["account_name"] = "Unknown"; } } if($this->sCustomerId != 'Y3421CH141') { $contact->account_name = $contactObj["account_name"]; } } if(isset($sugar_config['K_EvalancheConnector']['Contacts']['mappings']) && is_array($sugar_config['K_EvalancheConnector']['Contacts']['mappings'])) { $i = 0; $sLog = "\r\nCONTACT - HANDLE MAPPING\r\n"; foreach($sugar_config['K_EvalancheConnector']['Contacts']['mappings'] as $mappingPair) { if($this->sCustomerId == 'Y3421CH141') { break; } if(!trim($mappingPair)) continue; $mappingPair = explode(':',$mappingPair); foreach($contactObj as $sSugarFieldName => $mValue) { if($sSugarFieldName != $mappingPair[0]) { continue; } if($contactObj[$sSugarFieldName] === "" && trim($sugar_config["K_EvalancheConnector"]["Contacts"]["mappingdefaults"][$i])) { $contactObj[$sSugarFieldName] = $sugar_config["K_EvalancheConnector"]["Contacts"]["mappingdefaults"][$i]; $sLog .= "OVERRIDEN BY DEFAULT!!! ... " . $contactObj[$sSugarFieldName] . "\r\n"; } $contact->$sSugarFieldName = $contactObj[$sSugarFieldName]; $sLog .= $mappingPair[0] . "/ $sSugarFieldName is now set: " . $contact->$sSugarFieldName. "\r\n"; } $i++; } } $contact->k_evalanche_sync_c = 1; $contact->k_evalanche_state_c = 0; $contact->k_evalanche_justsynced_from_eva = 1; $contact->save(); if($contact->invalid_email) { $updateSQL = "UPDATE email_addresses SET invalid_email = '1' ". "WHERE deleted = 0 ". "AND email_address = '". $contact->email1 ."' ". "AND invalid_email = '0' ". "AND id IN ". "(SELECT eabr.email_address_id ". "FROM email_addr_bean_rel eabr ". "WHERE eabr.bean_id = '". $contact->id ."' AND eabr.deleted = 0)"; $result = $db->query($updateSQL); } $logMsg = $contactObj['first_name'].' '.$contactObj['last_name'].' ('.$contactObj['email'].') was '.($newContact?'created in SugarCRM':'updated to SugarCRM (Eva: ' . $eva_modified . ' &gt; ' . $sugar_modified . ')'); if($this->enableLogging) { $this->oLog->logMessage(Array('status'=>($newContact?'C':'U'),'direction'=>'I','text'=>$logMsg." ".$this->getContactLink($contact->id,$isLead?"Leads":"Contacts"))); } if($updateMessageGenerated == true) { $this->updateMessages[sizeof($this->updateMessages)-1] = $this->updateMessages[sizeof($this->updateMessages)-1]." ".$this->getContactLink($contact->id,$isLead?"Leads":"Contacts"); if($this->enableLogging) { $this->oLog->logMessage(Array('status'=>'W','direction'=>'I','text'=>$this->updateMessages[sizeof($this->updateMessages)-1])); } } $GLOBALS['db']->query("update ".($isLead?"lead":"contact")."s_cstm set k_evalanche_state_c = 0 where id_c = '".($contact->id)."'"); $GLOBALS['db']->query("update email_addresses set opt_out = ".($contactObj["opt_out"]?'1':'0')." ". "where deleted=0 and email_address = '".$contactObj["email"]."' and id IN (select eabr.email_address_id ". "from email_addr_bean_rel eabr where eabr.bean_id = '".$contact->id."' and eabr.deleted=0)"); $confirm_updated_data = true; } while($aRow && ($aRow = $db->fetchByAssoc($queryResult))); return $confirm_updated_data; } public function getContactLink($sugarID,$module="Contacts") { return '(<a href="index.php?module='.($module=="lead"?"Leads":($module=="contact"?"Contacts":$module)).'&action=DetailView&record='.$sugarID.'" target="_blank">'.$sugarID.'</a>)'; } public function credaris_149() { $this->oView->sendToClient(); if(!isset($_REQUEST["type"])) { $_REQUEST["type"] = ""; } $aColumns = array(); $aColumns[] = array('sName' => 'No.', 'sKey' => 'no'); $aColumns[] = array('sName' => 'Date', 'sKey' => 'date'); $aColumns[] = array('sName' => 'Destination', 'sKey' => 'link'); $aColumns[] = array('sName' => 'Status', 'sKey' => 'status'); $aColumns[] = array('sName' => 'Info', 'sKey' => 'msg'); $iPage = (isset($_REQUEST['page']) && is_numeric($_REQUEST['page'])) ? $_REQUEST['page'] : 0; $iPage = ($iPage < 1) ? 0 : $iPage; $oHistory = new stdClass(); $oHistory->iRowsPerPage = 5000; $oHistory->iPage = $iPage; $oHistory->sTitle = 'Import-Log'; $oHistory->iRecords = 100000; $oHistory->aGridCols = $aColumns; $oHistory->aGridRows = array(); $iSize = $oHistory->iRowsPerPage; $iOffset = $iPage * $iSize; $addClause = ""; if($_REQUEST["type"]=="error") { $addClause = " AND status IN ('E','D') "; } $sSql = 'SELECT log.*, c.first_name, c.last_name FROM k_evalancheconnector AS log'; $sSql .= ' LEFT JOIN contacts as c ON c.id=log.bean_id'; $sSql .= ' WHERE log.plugin="' . $this->sPluginName . '"'.$addClause; $sSql .= ' ORDER BY log.syncdate_mt DESC'; $sSql .= ' LIMIT ' . $iOffset . ', ' . $iSize; $queryResult = $GLOBALS['db']->query($sSql); $iLoop = 0; while($aRow = $GLOBALS['db']->fetchByAssoc($queryResult)) { $iLoop++; $aTime = explode('.', $aRow['syncdate_mt']); switch($aRow['status']) { case 'U': $sStatus = 'Update'; $sCss = 'background:#8f8;'; break; case 'C': $sStatus = 'Insert'; $sCss = 'background:#8f8;'; break; case 'W': $sStatus = 'Warning'; $sCss = 'background:#ff8'; break; case 'E': $sStatus = 'Error'; $sCss = 'background:#faa;'; break; case 'D': $sStatus = 'Delimiter'; $sCss = 'background:#6cf;'; break; default: $sStatus = 'Info'; $sCss = ''; break; } $replaceFrom = Array('&lt;','&gt;','&quot;'); $replaceTo = Array('<','>','"'); $aRow['msg'] = str_replace($replaceFrom, $replaceTo, $aRow['msg']); $aRecord = array(); $aRecord['value'] = $aRow; $aRecord['value']['no'] = number_format($aRow['id'], 0, ',', '.'); $aRecord['value']['date'] = date('Y-m-d H:i:s', $aTime[0]); $aRecord['value']['status'] = $sStatus; $aRecord['css'] = $sCss; $oHistory->aGridRows[] = $aRecord; } echo "<input type=checkbox name=type value=error ".($_REQUEST["type"]=="error"?"checked":"")." onclick='document.location.href=\"index.php?module=K_EvalancheConnector&action=plugin&plugin=Contacts&task=history&type=".($_REQUEST["type"]=="error"?"":"error")."\";'> <b>Show Errors</b>"; $this->oView->credaris_149($oHistory); } } 