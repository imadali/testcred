<?php

/*********************************************************************************
*
* DO NOT MODIFY THIS FILE!
*
* This file is part of KINAMU EvalancheConnector, an enhanced module for Sugar (TM). 
* Sugar (TM) is developed by SugarCRM Inc. (C).
* 
* KINAMU EvalancheConnector is licensed software and may only be used in alignment with the 
* End User License Agreement (EULA) received with this software. This software is copyrighted 
* and may not be further distributed without any written consent of 
* KINAMU Business Solutions GmbH (C).
* 
* KINAMU EvalancheConnector: Copyright (C) 2016 by KINAMU Business Solutions GmbH. All rights reserved.
*
* You can contact KINAMU Business Solutions GmbH via email at office@kinamu.com
*
********************************************************************************/


require_once('modules/K_EvalancheConnector/credaris_157.php'); require_once('modules/K_EvalancheConnector/credaris_158.php'); class K_EvalancheConnectorPlugin_Campaigns extends K_EvalancheConnectorPlugin { public function __construct() { ini_set('max_execution_time', 0); ini_set('memory_limit', '-1'); $this->sModule = 'Campaigns'; $this->sBean = 'Campaign'; $this->modPath = 'custom/modules/K_EvalancheConnector/'; $this->sHeadline = "SugarCRM Campaigns &harr; Evalanche Mailings"; $this->credaris_150['ID'] = 'evalanche_id'; $this->credaris_150['NAME'] = 'name'; $this->credaris_150['SUBJECT'] = 'objective'; $this->credaris_150['TIMESTAMP'] = 'date_entered'; $this->credaris_150['URL'] = 'refer_url'; $this->credaris_150['REPORT_URL'] = 'report_url'; $this->credaris_150['SEND_START_TIME'] = 'start_date'; $this->credaris_150['SEND_END_TIME'] = 'end_date'; $this->credaris_150['ADDRESSEES'] = 'addresses'; $this->credaris_150['RECIPIENTS'] = 'recipients'; $this->credaris_150['DUPLICATES'] = 'duplicates'; $this->credaris_150['BLACKLISTED'] = 'blacklisted'; $this->credaris_150['HARDBOUNCES'] = 'hardbounces'; $this->credaris_150['SOFTBOUNCES'] = 'softbounces'; $this->credaris_150['IMPRESSIONS'] = 'impressions'; $this->credaris_150['CLICKS'] = 'clicks'; $this->credaris_150['ROBINSONLISTED'] = 'robinsonlisted'; $this->credaris_150['UNIQUE_IMPRESSIONS'] = 'unique_impressions'; $this->credaris_150['UNIQUE_CLICKS'] = 'unique_clicks'; $this->credaris_150['UNSUBSCRIBES'] = 'unsubscribes'; $this->credaris_151 = 'ID'; $this->credaris_153 = $this->getNumberFormattedFields($this->sModule, $this->sBean); $this->aTasks['history'] = 'History'; $this->aTasks['sync'] = 'Synchronize'; $this->aTasks['config'] = 'Configuration'; $this->aTasks['crontab'] = 'Start Cronjob'; parent::__construct(); $this->credaris_154 = array( "ID", "NAME", "SUBJECT", "TIMESTAMP", "REFER_URL", "REPORT_URL", "SEND_START_TIME", "SEND_END_TIME", "ADDRESSEES", "RECIPIENTS", "DUPLICATES", "BLACKLISTED", "HARDBOUNCES", "SOFTBOUNCES", "IMPRESSIONS", "CLICKS", "ROBINSONLISTED", "UNIQUE_IMPRESSIONS", "UNIQUE_CLICKS", "UNSUBSCRIBES" ); $this->credaris_132(); $this->aConfig = $this->getConfig(); $this->aConnectionParams = $this->credaris_133(); $this->aRequestParams = $this->credaris_134(); } public function credaris_132() { $sugar_config = & $GLOBALS["sugar_config"]; if(!isset($GLOBALS["eva_conf_loaded"]) || ($GLOBALS["eva_conf_loaded"] != true)) { $administrationObj = new Administration(); $administrationObj->retrieveSettings('K_EvalancheConnector'); $contactFields = Array("pool_id","pool_id_lead","pool_id_addto","eva_time_offset","master","sync_eva_to_sugar", "sync_sugar_to_eva","sync_primary","merge_emails","ignore_email","category_id","main_type","sync_type","ignore_leads"); $campaignFields = Array("mandate_id","type_id","eva_time_offset","eva_url","refreshlimit","daylimit","max_running_mins", "get_statistics","get_recipients","get_impressions","get_article_impressions","get_unsubscribes"); if($administrationObj->settings["K_EvalancheConnector_mandate_id"]) { foreach($contactFields as $field) { $sugar_config['K_EvalancheConnector']['Contacts'][$field] = $administrationObj->settings['K_EvalancheConnector_'.$field]; } foreach($campaignFields as $field) { $sugar_config['K_EvalancheConnector']['Campaigns'][$field] = $administrationObj->settings['K_EvalancheConnector_'.$field]; } $sugar_config['K_EvalancheConnector']['Campaigns']['connection']['username'] = $sugar_config['K_EvalancheConnector']['Contacts']['connection']['username'] = $administrationObj->settings["K_EvalancheConnector_username"]; $sugar_config['K_EvalancheConnector']['Campaigns']['connection']['password'] = $sugar_config['K_EvalancheConnector']['Contacts']['connection']['password'] = $administrationObj->settings["K_EvalancheConnector_password"]; $sugar_config['K_EvalancheConnector']['Contacts']['mappings'] = unserialize(str_replace("&quot;",'"',$administrationObj->settings["K_EvalancheConnector_mappings"])); $sugar_config['K_EvalancheConnector']['Contacts']['mappingdefaults'] = unserialize(str_replace("&quot;",'"',$administrationObj->settings["K_EvalancheConnector_mappingdefaults"])); $GLOBALS["eva_conf_loaded"] = true; } } return $sugar_config; } public function credaris_133() { $aParams = array(); $aParams['sUsername'] = isset($this->aConfig['connection']['username']) ? $this->aConfig['connection']['username'] : 'dummyX'; $aParams['sPassword'] = isset($this->aConfig['connection']['password']) ? $this->aConfig['connection']['password'] : 'dummyX'; $aParams['sEndpoint'] = 'Mailing'; return $aParams; } public function credaris_134() { $aParams = array(); $aParams['id'] = isset($this->aConfig['mandate_id']) ? $this->aConfig['mandate_id'] : ''; $aParams['array'] = $this->credaris_154; return $aParams; } public function updateConfig() { $myConfFields = Array('mandate_id','type_id','eva_time_offset','refreshlimit','daylimit','max_running_mins', 'eva_url','get_statistics','get_recipients','get_impressions','get_article_impressions', 'get_unsubscribes','eusername','epassword'); $administrationObj = new Administration(); foreach($myConfFields as $varName) { $varVal = str_replace('%40','@',str_replace('%2C',',',urldecode($_REQUEST[$varName]))); if($varName=="eusername"||$varName=="epassword") { if($varName=="epassword") { $varName = "password"; if(!trim($_REQUEST["pwd_chg"])) continue; $administrationObj->saveSetting("K_EvalancheConnector", $varName, $varVal); } else { $varName = "username"; $administrationObj->saveSetting("K_EvalancheConnector", $varName, $varVal); } } else $administrationObj->saveSetting("K_EvalancheConnector", $varName, $varVal); } } public function renderConfig() { $current_language = $GLOBALS["current_language"]; if(!isset($GLOBALS["mod_strings"]) || !isset($GLOBALS["mod_strings"]['LBL_FORM_CONFIG_HEADLINE'])) { $my_mod_strings = "mod_strings"; $$my_mod_strings = &$GLOBALS["mod_strings"]; if(stristr($current_language,"de_") || stristr($current_language,"ge_")) include("custom/modules/K_EvalancheConnector/plugins/Campaigns/language/de_DE.lang.php"); else include("custom/modules/K_EvalancheConnector/plugins/Campaigns/language/en_us.lang.php"); } $mod_strings = $GLOBALS["mod_strings"]; $app_list_strings = $GLOBALS["app_list_strings"]; $app_strings = $GLOBALS["app_strings"]; if(isset($_REQUEST["todo"]) && ($_REQUEST["todo"] == 'saveCFG')) { $this->updateConfig(); return; } $aFormFields['module']['name'] = 'module'; $aFormFields['module']['value'] = $_REQUEST['module']; $aFormFields['action']['name'] = 'action'; $aFormFields['action']['value'] = $_REQUEST['action']; $aFormFields['plugin']['name'] = 'plugin'; $aFormFields['plugin']['value'] = $this->sPluginName; $aFormFields['task']['name'] = 'action'; $aFormFields['task']['value'] = $_REQUEST['task']; $myConfFields = Array('mandate_id','type_id','eva_time_offset','refreshlimit','daylimit','max_running_mins', 'eva_url','get_statistics','get_recipients','get_impressions','get_article_impressions','get_unsubscribes'); foreach($myConfFields as $colName) { $aFormFields[$colName]['name'] = $colName; $aFormFields[$colName]['value'] = $this->aConfig[$colName]; } $aFormFields['eusername']['name'] = 'eusername'; $aFormFields['eusername']['value'] = $this->aConfig['connection']['username']; $aFormFields['epassword']['name'] = 'epassword'; $aFormFields['epassword']['value'] = $this->aConfig['connection']['password']; $myConfFields[] = "eusername"; $myConfFields[] = "epassword"; $bLoadDefaultConfig = isset($_REQUEST['loadDefault']) ? true : false; $aMapping = Array(); $sHtml = '<form name="kinamuAdminSingleForm" method="POST">'; $sHtml .= '<input type="hidden" name="' . $aFormFields['module']['name'] . '" value="' . $aFormFields['module']['value'] . '">'; $sHtml .= '<input type="hidden" name="' . $aFormFields['action']['name'] . '" value="' . $aFormFields['action']['value'] . '">'; $sHtml .= '<input type="hidden" name="' . $aFormFields['plugin']['name'] . '" value="' . $aFormFields['plugin']['value'] . '">'; $sHtml .= '<h4>' . $mod_strings['LBL_FORM_CONFIG_HEADLINE'] . '</h4>'; $sHtml .= '<div>' . $mod_strings['LBL_FORM_CONFIG_INFO'] . '</div>'; $sHtml .= '<div id="detailpanel_2" class="edit view edit508  expanded">'; $sHtml .= '<table width="100%" border="0" cellspacing="1" cellpadding="0" id="LBL_PANEL_ADVANCED" class="yui3-skin-sam edit view panelContainer">'; $sHtml .= '<tbody>'; $i = 0; while($i<count($myConfFields)) { $sHtml .= '<tr>'; do { $uplabel = strtoupper($myConfFields[$i]); if($i==count($myConfFields)) { $sHTML .= '<td colspan=3>&nbsp;</td>'; } else { if(substr($myConfFields[$i],0,4) == "get_") { $sHtml .= '<td valign="top" width="12%" scope="col">'.$mod_strings["LBL_$uplabel"].'</td>'; $sHtml .= '<td valign="top" width="1%"><img src="modules/' . $aFormFields['module']['value'] . '/images/information.png" title="' . $mod_strings["LBL_$uplabel"."_HELP"]. '"></td>'; $sChecked = ($aFormFields[$myConfFields[$i]]['value'] == '1') ? 'checked' : ''; $sHtml .= '<td valign="top" width="37%"><input type="checkbox" name="' . $aFormFields[$myConfFields[$i]]['name'] . '" id="' . $aFormFields[$myConfFields[$i]]['name'] . '" value="1" ' . $sChecked . ' /></td>'; } else { $sHtml .= '<td valign="top" width="12%" scope="col">' . $mod_strings["LBL_$uplabel"] . ':</td>'; $sHtml .= '<td valign="top" width="1%"><img src="modules/' . $aFormFields['module']['value'] . '/images/information.png" title="' . $mod_strings["LBL_$uplabel"."_HELP"] . '"></td>'; if($myConfFields[$i] != "eva_url" && $myConfFields[$i] != 'eusername' && $myConfFields[$i] != 'epassword' && $myConfFields[$i] != 'refreshlimit') { $numeric_check = 'onkeyup="if(this.value.match(/[^0-9^\.^\-]/)!=-1) { this.value = this.value.replace(/[^0-9^\-]/g,\'\'); }" style="text-align:right;"'; } else { $numeric_check = ""; } $sHtml .= '<td valign="top" width="37%"><input onchange="$(\'#pwd_chg\').val(true);" type="'.($myConfFields[$i]=='epassword'?'password':'text').'" name="' . $aFormFields[$myConfFields[$i]]['name'] . '" id="' . $aFormFields[$myConfFields[$i]]['name'] . '" value="' . $aFormFields[$myConfFields[$i]]['value'] . '" '.$numeric_check.($myConfFields[$i] == 'eusername' || $myConfFields[$i] == 'epassword' ? ' style="width:90%;"' : '').'></td>'; if($myConfFields[$i]=='epassword') $sHtml .= "<input type=hidden name='pwd_chg' id='pwd_chg'>"; } } }while(++$i%2==1); $sHtml .= '</tr>'; } $sHtml .= '</tbody>'; $sHtml .= '</table>'; $sHtml .= '</div>'; $sHtml .= '<table border="0" cellspacing="1" cellpadding="1">'; $sHtml .= '<tr>'; $sHtml .= '<td>'; $sHtml .= '<input title="' . $app_strings['LBL_SAVE_BUTTON_LABEL'] . '" class="button primary" onclick="K_EvalancheConnectorPluginContacts.submitForm();" type="button" name="button" value="' . $app_strings['LBL_SAVE_BUTTON_LABEL'] . '">'; $sHtml .= '<input title="' . $app_strings['LBL_CANCEL_BUTTON_LABEL'] . '" class="button" onclick="window.location.assign(\'index.php?module=' . $aFormFields['module']['value'] . '&action=' . $aFormFields['action']['value'] . '&plugin=' . $aFormFields['plugin']['value'] . '&task=' . $aFormFields['task']['value'] . '\');" type="button" name="button" value="' . $app_strings['LBL_CANCEL_BUTTON_LABEL'] . '">'; $sHtml .= '</td>'; $sHtml .= '</tr>'; $sHtml .= '</table>'; $sHtml .= '</form>'; $sHtml .= '<script type="text/javascript" src="custom/modules/K_EvalancheConnector/plugins/Contacts/settings.js"></script>'; $sHtml .= '<script type="text/javascript">'; $sHtml .= 'K_EvalancheConnectorPluginContacts.sSugarOptions = \'<option value="">' . $mod_strings['LBL_FORM_SELECT_PLEASE_SELECT'] . '</option>\';'; $sHtml .= 'K_EvalancheConnectorPluginContacts.sEvalancheOptions = \'<option value="">' . $mod_strings['LBL_FORM_SELECT_PLEASE_SELECT'] . '</option>\';'; $sHtml .= 'K_EvalancheConnectorPluginContacts.aMapping = null;'; $sHtml .= 'K_EvalancheConnectorPluginContacts.oSugarModuleFields = null;'; $sHtml .= 'K_EvalancheConnectorPluginContacts.oEvalancheFields = null;'; $sHtml .= '</script>'; $this->oView->render($sHtml); } public function credaris_135($aFormFields) { $aConfig = array(); $aConfig['pool_id'] = isset($_POST['kec_poolId']) ? $_POST['kec_poolId'] : ''; $aConfig['sync_primary'] = (isset($_POST['kec_sync_primary']) && ($_POST['kec_sync_primary'] == '1')) ? '1' : '0'; $aConfig['mapping'] = array(); if(isset($_POST['kec_mapping_eva_name'])) { foreach($_POST['kec_mapping_eva_name'] as $iLoop => $sDummy) { $aTemp = array(); $aTemp['eva']['name'] = trim(urldecode($_POST['kec_mapping_eva_name'][$iLoop])); $aTemp['eva']['sync'] = (isset($_POST['kec_mapping_eva_sync'][$iLoop]) && ($_POST['kec_mapping_eva_sync'][$iLoop] == 1)) ? '1' : '0'; $aTemp['crm']['name'] = trim(urldecode($_POST['kec_mapping_crm_name'][$iLoop])); $aTemp['crm']['sync'] = (isset($_POST['kec_mapping_crm_sync'][$iLoop]) && ($_POST['kec_mapping_crm_sync'][$iLoop] == 1)) ? '1' : '0'; $bError = (empty($aTemp['eva']['name']) || empty($aTemp['crm']['name'])) ? true : false; if($bError) { printf(translate('LBL_FORM_MAPPING_EVA2CRM_ERROR'), ($iLoop + 1)); return false; } $aConfig['mapping'][] = $aTemp; } } $bSyncEVA2CRM = false; $bSyncCRM2EVA = false; return true; } public function credaris_136($bReload=false) { return Array(); } public function credaris_137() { $skipped = 0; return $skipped; } public function credaris_143() { } public function credaris_144($convArray, $sugarID) { return Array(); } public function credaris_147s($bReload=false) { $sugar_config = $GLOBALS["sugar_config"]; $db = $GLOBALS["db"]; if(empty($this->aExternalRecords) || $bReload) { $this->aExternalRecords = array(); $iTimeStart = microtime(true); $aResultSets = array(); $this->oView->renderActivity('starting connection to Evalanche ...'); $oRequest = new K_EvalancheConnectorSOAP($this->aConnectionParams); $this->oView->renderActivity('connection established ...'); $this->oView->renderActivity('starting request to Evalanche ...'); $preRequestArray = Array($sugar_config['K_EvalancheConnector']['Campaigns']['type_id'], $this->aRequestParams['id']); $oResponse = $oRequest->credaris_127('getByTypeId', $preRequestArray); if(is_array($oResponse->item)) { foreach($oResponse->item as $oResult) { $this->credaris_147($oResult, $oRequest); } } else if(is_object($oResponse->item)) { $oResult = $oResponse->item; $this->credaris_147($oResult, $oRequest); } $this->oView->renderActivity(sizeOf($this->aExternalRecords) . ' successfully read from Evalanche in ' . (microtime(true) - $iTimeStart) . ' seconds'); } return $this->aExternalRecords; } public function credaris_147($oTypeRecord, $oRequest) { $sugar_config = $GLOBALS["sugar_config"]; if(time()-$sugar_config['K_EvalancheConnector']['Campaigns']['daylimit']*24*60*60 > $oTypeRecord->send_end_time) { return; } $aRecord = array(); $goTime = time(); $preArray = Array($oTypeRecord->id,Array('PROFILEID','EMAIL')); $oStatistics = $oRequest->credaris_127('getStatistics', $oTypeRecord->id); $aRecord["evalanche_id"] = $oTypeRecord->id; $aRecord["name"] = $oTypeRecord->name; $aRecord["subject"] = $oTypeRecord->subject; $aRecord["campaign_date"] = Date('Y-m-d H:i:s', $oTypeRecord->timestamp); $aRecord["refer_url"] = $oTypeRecord->url; $aRecord["report_url"] = $oTypeRecord->report_url; $aRecord["start_date"] = Date('Y-m-d H:i:s', $oTypeRecord->send_start_time); $aRecord["end_date"] = Date('Y-m-d H:i:s', $oTypeRecord->send_end_time); $aRecord["addresses"] = $oStatistics->addressees; $aRecord["recipients"] = $oStatistics->recipients; $aRecord["duplicates"] = $oStatistics->duplicates; $aRecord["blacklisted"] = $oStatistics->blacklisted; $aRecord["hardbounces"] = $oStatistics->hardbounces; $aRecord["softbounces"] = $oStatistics->softbounces; $aRecord["impressions"] = $oStatistics->impressions; $aRecord["clicks"] = $oStatistics->clicks; $aRecord["robinsonlisted"] = $oStatistics->robinsonlisted; $aRecord["unique_impressions"] = $oStatistics->unique_impressions; $aRecord["unique_clicks"] = $oStatistics->unique_clicks; $aRecord["unsubscribes"] = $oStatistics->unsubscribes; $this->aExternalRecords[] = $aRecord; } public function updateRecords($sHTML="") { $sugar_config = $GLOBALS["sugar_config"]; $db = $GLOBALS["db"]; $current_user = $GLOBALS["current_user"]; $skipped = 0; $this->aExternalRecords = array(); $iTimeStart = microtime(true); $aResultSets = array(); $this->oView->renderActivity('starting connection to Evalanche ...'); if($this->enableLogging) $this->oLog->logMessage(Array('status'=>'I','direction'=>'I','text'=>'starting connection to Evalanche ...')); $oRequest = new K_EvalancheConnectorSOAP($this->aConnectionParams); $this->oView->renderActivity('connection established ...'); $this->oView->renderActivity('starting request to Evalanche ...'); if($this->enableLogging) $this->oLog->logMessage(Array('status'=>'I','direction'=>'I','text'=>'connection established ... starting request to Evalanche ...')); $preRequestArray = Array($sugar_config['K_EvalancheConnector']['Campaigns']['type_id'], $this->aRequestParams['id']); $oResponse = $oRequest->credaris_127('getByTypeId', $preRequestArray); if($this->enableLogging && (is_array($oResponse->item) && count($oResponse->item)>0) || is_object($oResponse->item)) { $logMsg = '--- BEGINN UPDATE EVALANCHE TO SUGAR (User: ' . $current_user->user_name . ') ---'; if($this->enableLogging) $this->oLog->logMessage(Array('status'=>'D','direction'=>'I','text'=>$logMsg)); } if(is_array($oResponse->item)) { $startCampaignSyncTime = time(); foreach($oResponse->item as $oResult) { if($this->credaris_148($oResult, $oRequest)) { $updated++; } if(time()-$startCampaignSyncTime >= $sugar_config['K_EvalancheConnector']['Campaigns']['max_running_mins']*60) { break; } } } else if(is_object($oResponse->item)) { $oResult = $oResponse->item; $this->credaris_148($oResult, $oRequest); } $sSql = "update contacts set readfactor = ". "(select sum(case when opened is null then 0 else opened end)*100/count(*) from k_evacampaigns_contacts where contact_id = contacts.id) ". "where id IN (select distinct contact_id from k_evacampaigns_contacts)"; $GLOBALS['db']->query($sSql); $sLog = "\r\n=============================================\r\n"; $sLog .= $sSql . "\r\n\r\n"; $sSql = "update leads set readfactor = ". "(select sum(case when opened is null then 0 else opened end)*100/count(*) from k_evacampaigns_leads where lead_id = leads.id) ". "where id IN (select distinct lead_id from k_evacampaigns_leads)"; $GLOBALS['db']->query($sSql); $sLog = "\r\n=============================================\r\n"; $sLog .= $sSql . "\r\n\r\n"; $this->updateMessages[] = "calculate and update read-rates of recipient contacts for statistic..."; if($this->enableLogging) $this->oLog->logMessage(Array('status'=>'U','direction'=>'I','text'=>$this->updateMessages[sizeof($this->updateMessages)-1])); if($this->enableLogging && (is_array($oResponse->item) && count($oResponse->item)>0) || is_object($oResponse->item)) { $logMsg = '--- END UPDATE EVALANCHE TO SUGAR (User: ' . $current_user->user_name . ') ---'; if($this->enableLogging) $this->oLog->logMessage(Array('status'=>'D','direction'=>'I','text'=>$logMsg)); } $this->updateMessages[] = sizeOf($this->aExternalRecords) . ' successfully read from Evalanche in ' . (microtime(true) - $iTimeStart) . ' seconds'; if($this->enableLogging) $this->oLog->logMessage(Array('status'=>'I','direction'=>'I','text'=>$this->updateMessages[sizeof($this->updateMessages)-1])); return $skipped; } public function credaris_148($oTypeRecord, $oRequest) { $sugar_config = $GLOBALS["sugar_config"]; $db = $GLOBALS["db"]; $sLog = "START UPDATE CAMPAIGN IN SUGAR AT " . date("Y-m-d H:i:s") . "\r\n"; if(time()-$sugar_config['K_EvalancheConnector']['Campaigns']['daylimit']*24*60*60 > $oTypeRecord->send_end_time) { return false; } $aRecord = array(); $goTime = time(); $queryResult = $GLOBALS['db']->query("select id, date_modified from k_evacampaigns where deleted=0 and evalanche_id = ".$oTypeRecord->id); if($aRow = $GLOBALS['db']->fetchByAssoc($queryResult)) { $sugar_id = $aRow['id']; $last_synchronized = strtotime($aRow["date_modified"]); $log_status = 'U'; $log_status_text = 'updated to'; if(is_numeric($sugar_config['K_EvalancheConnector']['Campaigns']['refreshlimit'])) { if(time()-$sugar_config['K_EvalancheConnector']['Campaigns']['refreshlimit']*24*60*60 > $oTypeRecord->send_end_time) { return false; } } else if(preg_match('/^[\,\:0-9]+$/',$sugar_config['K_EvalancheConnector']['Campaigns']['refreshlimit'])) { $refreshLimits = explode(',',$sugar_config['K_EvalancheConnector']['Campaigns']['refreshlimit']); $refreshLimit_result = 0; $days_result = 0; $days_max = 0; foreach($refreshLimits as $refreshLimit) { list($days,$minutes) = explode(':',$refreshLimit); if($days>$days_max) $days_max = $days; if(time()-$days*24*60*60 < $oTypeRecord->send_end_time) { if($minutes > $refreshLimit_result) { $refreshLimit_result = $minutes; $days_result = $days; } } } if($refreshLimit_result == 0) { $this->updateMessages[] = 'Campaign '.$oTypeRecord->name." will not get synchronized (older than $days_max days)"; if($this->enableLogging) $this->oLog->logMessage(Array('status'=>'I','direction'=>'I','text'=>$this->updateMessages[sizeof($this->updateMessages)-1])); return false; } if(time()-$refreshLimit_result*60 < $last_synchronized) { $this->updateMessages[] = 'Campaign '.$oTypeRecord->name." will not get synchronized (already synchronized within the last $refreshLimit_result minutes)"; if($this->enableLogging) $this->oLog->logMessage(Array('status'=>'I','direction'=>'I','text'=>$this->updateMessages[sizeof($this->updateMessages)-1])); return false; } } } else { $sugar_id = false; $log_status = 'C'; $log_status_text = 'inserted into'; } $oStatistics = $oRequest->credaris_127('getStatistics', $oTypeRecord->id); $this->updateMessages[] = "retrieve main statistic data for campaign &quot;".$oTypeRecord->name."&quot;..."; if($this->enableLogging) $this->oLog->logMessage(Array('status'=>'I','direction'=>'I','text'=>$this->updateMessages[sizeof($this->updateMessages)-1])); $timeOffset = $sugar_config['K_EvalancheConnector']['Campaigns']['eva_time_offset']*60; $aRecord["evalanche_id"] = $oTypeRecord->id; $aRecord["name"] = $oTypeRecord->name; $aRecord["subject"] = utf8_encode($oTypeRecord->subject); $aRecord["campaign_date"] = Date('Y-m-d H:i:s', $oTypeRecord->timestamp+$timeOffset); $aRecord["refer_url"] = $oTypeRecord->url; $aRecord["report_url"] = $oTypeRecord->report_url; $aRecord["start_date"] = Date('Y-m-d H:i:s', $oTypeRecord->send_start_time+$timeOffset); $aRecord["end_date"] = Date('Y-m-d H:i:s', $oTypeRecord->send_end_time+$timeOffset); $aRecord["addresses"] = $oStatistics->addressees; $aRecord["recipients"] = $oStatistics->recipients; $aRecord["duplicates"] = $oStatistics->duplicates; $aRecord["blacklisted"] = $oStatistics->blacklisted; $aRecord["hardbounces"] = $oStatistics->hardbounces; $aRecord["softbounces"] = $oStatistics->softbounces; $aRecord["impressions"] = $oStatistics->impressions; $aRecord["clicks"] = $oStatistics->clicks; $aRecord["robinsonlisted"] = $oStatistics->robinsonlisted; $aRecord["unique_impressions"] = $oStatistics->unique_impressions; $aRecord["unique_clicks"] = $oStatistics->unique_clicks; $aRecord["unsubscribes"] = $oStatistics->unsubscribes; $this->aExternalRecords[] = $aRecord; $sLog .= "TIME BEFORE STATISTICS: " . date("Y-m-d H:i:s") . "\r\n"; if($sugar_config['K_EvalancheConnector']['Campaigns']['get_statistics'] == '1') { $eva_resid = preg_replace('/^[^\d]+/','',$oTypeRecord->report_url); $chart_url = $sugar_config['K_EvalancheConnector']['Campaigns']['eva_url']. "/chartdata.php?chart=newsletter_engagement,resid=$eva_resid&I_USERNAME=". $sugar_config['K_EvalancheConnector']['Campaigns']['connection']['username']."&I_PASSWD=". $sugar_config['K_EvalancheConnector']['Campaigns']['connection']['password']; $rCURL = curl_init(); curl_setopt($rCURL, CURLOPT_URL, $chart_url); curl_setopt($rCURL, CURLOPT_HEADER, 0); curl_setopt($rCURL, CURLOPT_RETURNTRANSFER, 1); $chart_response = curl_exec($rCURL); curl_close($rCURL); if(preg_match_all('<set value="([^"]+)" color="[^"]+" label="[^"]+"/>',$chart_response,$matches,PREG_PATTERN_ORDER)) { list($aRecord["read_percent"],$aRecord["overflown_percent"],$aRecord["unread_percent"]) = $matches[1]; $this->updateMessages[] = "successfully retrieved read-rates chart diagram of campaign &quot;".$oTypeRecord->name."&quot;"; if($this->enableLogging) $this->oLog->logMessage(Array('status'=>'I','direction'=>'I','text'=>$this->updateMessages[sizeof($this->updateMessages)-1])); } else { if(!trim($chart_response)) { $this->updateMessages[] = "unable to retrieve read-rates chart data of campaign &quot;".$oTypeRecord->name."&quot; (empty data/url), this part was skipped..."; if($this->enableLogging) $this->oLog->logMessage(Array('status'=>'W','direction'=>'I','text'=>$this->updateMessages[sizeof($this->updateMessages)-1])); } else { $this->updateMessages[] = "unable to interpret read-rates chart data of campaign &quot;".$oTypeRecord->name."&quot;, this part was skipped..."; if($this->enableLogging) $this->oLog->logMessage(Array('status'=>'W','direction'=>'I','text'=>$this->updateMessages[sizeof($this->updateMessages)-1])); } } $chart_url = $sugar_config['K_EvalancheConnector']['Campaigns']['eva_url']. "/chartdata.php?chart=newsletter_progression_6hours,resid=$eva_resid&I_USERNAME=". $sugar_config['K_EvalancheConnector']['Campaigns']['connection']['username']."&I_PASSWD=". $sugar_config['K_EvalancheConnector']['Campaigns']['connection']['password']; $rCURL = curl_init(); curl_setopt($rCURL, CURLOPT_URL, $chart_url); curl_setopt($rCURL, CURLOPT_HEADER, 0); curl_setopt($rCURL, CURLOPT_RETURNTRANSFER, 1); $chart_response = curl_exec($rCURL); curl_close($rCURL); $chart_dump = Array(); if(!trim($chart_response)) { $this->updateMessages[] = "unable to retrieve 6hrs recipients impression chart of campaign &quot;".$oTypeRecord->name."&quot; (empty data/url), this part was skipped..."; if($this->enableLogging) $this->oLog->logMessage(Array('status'=>'W','direction'=>'I','text'=>$this->updateMessages[sizeof($this->updateMessages)-1])); } else { if(preg_match_all('<category label="\d\d\.\d\d\s([^"]+)"/>',$chart_response,$matches,PREG_PATTERN_ORDER)) { $chart_dump['labels'] = $matches[1]; if(trim($chart_dump['labels'][0])) { $real_timestamp = strtotime('01.01.2010 '.$chart_dump['labels'][0].":00"); $src_timestamp = strtotime('01.01.2010 '.Date('H:i:s', $oTypeRecord->send_start_time)); if(round((24*60*60+$src_timestamp-$real_timestamp)%(24*60*60)/60/60) == 2) { $calcOffset = -2 * 60 * 60 + $timeOffset; } else { $calcOffset = $timeOffset; } $aRecord["campaign_date"] = Date('Y-m-d H:i:s', $oTypeRecord->timestamp+$calcOffset); $aRecord["start_date"] = Date('Y-m-d H:i:s', $oTypeRecord->send_start_time+$calcOffset); $aRecord["end_date"] = Date('Y-m-d H:i:s', $oTypeRecord->send_end_time+$calcOffset); } if(preg_match_all('/<dataset seriesName="([^"]+)"[^>]+color="([^"]+)([^>]+)>/',$chart_response,$matches,PREG_PATTERN_ORDER)) { for($i=0; $i<count($matches[1]) ;$i++) { $chart_dump['names'][] = $matches[1][$i]; $rgb = array(); for ($x=0;$x<3;$x++){ $rgb[$x] = hexdec(substr($matches[2][$i],(2*$x),2)); } $chart_dump['colors'][] = implode(',',$rgb); } if(preg_match_all('<set value="([^"]+)"/>',$chart_response,$matches,PREG_PATTERN_ORDER)) { $count_total = count($matches[1]); $count_rows = $count_total / count($chart_dump['names']); for($i=0; $i<$count_total ;$i++) { $chart_dump['data'][abs($i/$count_rows)][$i%$count_rows] = $matches[1][$i]; } $aRecord["linechart_6hrs"] = serialize($chart_dump); $this->updateMessages[] = "successfully retrieved 6hrs recipients impression chart of campaign &quot;".$oTypeRecord->name."&quot;"; if($this->enableLogging) $this->oLog->logMessage(Array('status'=>'I','direction'=>'I','text'=>$this->updateMessages[sizeof($this->updateMessages)-1])); } else { $this->updateMessages[] = "unable to retrieve 6hrs recipients impression chart of campaign &quot;".$oTypeRecord->name."&quot; (couldn't interpret chart values), this part was skipped..."; if($this->enableLogging) $this->oLog->logMessage(Array('status'=>'W','direction'=>'I','text'=>$this->updateMessages[sizeof($this->updateMessages)-1])); } } else { $this->updateMessages[] = "unable to retrieve 6hrs recipients impression chart of campaign &quot;".$oTypeRecord->name."&quot; (couldn't interpret dataset series name), this part was skipped..."; if($this->enableLogging) $this->oLog->logMessage(Array('status'=>'W','direction'=>'I','text'=>$this->updateMessages[sizeof($this->updateMessages)-1])); } } else { $this->updateMessages[] = "unable to retrieve 6hrs recipients impression chart of campaign &quot;".$oTypeRecord->name."&quot; (couldn't interpret category labels), this part was skipped..."; if($this->enableLogging) $this->oLog->logMessage(Array('status'=>'W','direction'=>'I','text'=>$this->updateMessages[sizeof($this->updateMessages)-1])); } } } $campaignObj = new K_EvaCampaign(); if($sugar_id) { $campaignObj->retrieve($sugar_id); } foreach($aRecord as $key => $val) { $campaignObj->$key = $val; } $campaignObj->save(); $this->updateMessages[] = "Campaign &quot;".$aRecord["name"]."&quot; was successfully $log_status_text SugarCRM ".$this->getCampaignLink($campaignObj->id); if($this->enableLogging) $this->oLog->logMessage(Array('status'=>$log_status,'direction'=>'I','text'=>$this->updateMessages[sizeof($this->updateMessages)-1])); if($sugar_config['K_EvalancheConnector']['Campaigns']['get_recipients'] == '1') { $oResponse = $oRequest->credaris_127('getRecipientsProfiles', Array($oTypeRecord->id,Array('PROFILEID','EMAIL'))); try { $iLoop = 0; $sTime = time(); while($oResponse->status < 2 || $oResponse->status == 3) { $iLoop++; $oResponse = $oRequest->oConnection->getJobInformation($oResponse->id); sleep(1); } if($oResponse->status == 2) { $oResult = $oRequest->oConnection->getResults($oResponse->id); $aRecipientSets[] = $oResult; $recipientCnt = 0; if($oResult && $oResult->result->item) { $recipientCnt += count($oResult->result->item); } while($oResult->chunks_left > 0) { $oResult = $oRequest->oConnection->getResults($oResponse->id); $aRecipientSets[] = $oResult; if($oResult && $oResult->result->item) { $recipientCnt += count($oResult->result->item); } } } $getRecipientsTime = time()-$sTime; $this->updateMessages[] = "$recipientCnt recipients where $log_status_text SugarCRM in $getRecipientsTime secs ".$this->getCampaignLink($campaignObj->id); if($this->enableLogging) $this->oLog->logMessage(Array('status'=>$log_status,'direction'=>'I','text'=>$this->updateMessages[sizeof($this->updateMessages)-1])); $recipientsOK = true; } catch (Exception $e) { $logMsg = $e->getMessage(); $this->updateMessages[] = "<b style='color:#f00;'>Couldn't retrieve recipients - SOAP-Exception: ".$logMsg."</b> ".$this->getCampaignLink($campaignObj->id); if($this->enableLogging) $this->oLog->logMessage(Array('status'=>'E','direction'=>'I','text'=>$this->updateMessages[sizeof($this->updateMessages)-1])); $recipientsOK = false; $aRecipientSets = Array(); } if($recipientsOK) { if($sugar_config['K_EvalancheConnector']['Campaigns']['get_impressions'] == '1') { $oResponse2 = $oRequest->credaris_127('getImpressionProfiles', Array($oTypeRecord->id,Array('PROFILEID','EMAIL'))); $aResultSets = Array(); try { $iLoop = 0; $sTime = time(); while($oResponse2->status < 2 || $oResponse2->status == 3) { $iLoop++; $oResponse2 = $oRequest->oConnection->getJobInformation($oResponse2->id); sleep(1); } if($oResponse2->status == 2) { $oResult = $oRequest->oConnection->getResults($oResponse2->id); $aResultSets[] = $oResult; $impressionCnt = 0; if($oResult && $oResult->result->item) { $impressionCnt += count($oResult->result->item); } while($oResult->chunks_left > 0) { $oResult = $oRequest->oConnection->getResults($oResponse2->id); $aResultSets[] = $oResult; if($oResult && $oResult->result->item) { $impressionCnt += count($oResult->result->item); } } } $getImpressionsTime = time()-$sTime; $this->updateMessages[] = "$impressionCnt impressions where $log_status_text SugarCRM in $getImpressionsTime secs ".$this->getCampaignLink($campaignObj->id); if($this->enableLogging) $this->oLog->logMessage(Array('status'=>$log_status,'direction'=>'I','text'=>$this->updateMessages[sizeof($this->updateMessages)-1])); $impressionsOK = true; } catch (Exception $e) { $logMsg = $e->getMessage(); $this->updateMessages[] = "<b style='color:#f00;'>Couldn't retrieve impressions - SOAP-Exception: ".$logMsg."</b> ".$this->getCampaignLink($campaignObj->id); if($this->enableLogging) $this->oLog->logMessage(Array('status'=>'E','direction'=>'I','text'=>$this->updateMessages[sizeof($this->updateMessages)-1])); $impressionsOK = false; } } if($sugar_config['K_EvalancheConnector']['Campaigns']['get_unsubscribes'] == '1') { $oResponse5 = $oRequest->credaris_127('getUnsubscriptionProfiles', Array($oTypeRecord->id,Array('PROFILEID','EMAIL'))); $aResultSetsBye = Array(); try { $iLoop = 0; $sTime = time(); while($oResponse5->status < 2 || $oResponse5->status == 3) { $iLoop++; $oResponse5 = $oRequest->oConnection->getJobInformation($oResponse5->id); sleep(1); } if($oResponse5->status == 2) { $oResult = $oRequest->oConnection->getResults($oResponse5->id); $aResultSetsBye[] = $oResult; $subscriptionCnt = 0; if($oResult && $oResult->result->item) { $subscriptionCnt += count($oResult->result->item); } while($oResult->chunks_left > 0) { $oResult = $oRequest->oConnection->getResults($oResponse5->id); $aResultSetsBye[] = $oResult; if($oResult && $oResult->result->item) { $subscriptionCnt += count($oResult->result->item); } } } $getUnsubscribesTime = time()-$sTime; $this->updateMessages[] = "$subscriptionCnt unsubscriptions where $log_status_text SugarCRM in $getUnsubscribesTime secs ".$this->getCampaignLink($campaignObj->id); if($this->enableLogging) $this->oLog->logMessage(Array('status'=>$log_status,'direction'=>'I','text'=>$this->updateMessages[sizeof($this->updateMessages)-1])); $subscriptionsOK = true; } catch (Exception $e) { $logMsg = $e->getMessage(); $this->updateMessages[] = "<b style='color:#f00;'>Couldn't retrieve unsubscriptions - SOAP-Exception: ".$logMsg."</b> ".$this->getCampaignLink($campaignObj->id); if($this->enableLogging) $this->oLog->logMessage(Array('status'=>'E','direction'=>'I','text'=>$this->updateMessages[sizeof($this->updateMessages)-1])); $subscriptionsOK = false; } } $unsubProfile = Array(); if($subscriptionsOK) foreach($aResultSetsBye as $classObj) { if(is_array($classObj->result->item)) { foreach($classObj->result->item as $item) { $unsubProfile[$item->items->item[0]->value] = 1; } } if(is_object($classObj->result->item)) { if( (property_exists($classObj->result->item, "items")) && (property_exists($classObj->result->item->items, "item")) && is_array($classObj->result->item->items->item) ) { $unsubProfile[$classObj->result->item->items->item[0]->value] = 1; } } } $openedProfile = Array(); if($impressionsOK) foreach($aResultSets as $classObj) { if(is_array($classObj->result->item)) { foreach($classObj->result->item as $item) { $openedProfile[$item->items->item[0]->value] = 1; } } if(is_object($classObj->result->item)) { if( (property_exists($classObj->result->item, "items")) && (property_exists($classObj->result->item->items, "item")) && is_array($classObj->result->item->items->item) ) { $openedProfile[$classObj->result->item->items->item[0]->value] = 1; } } } $GLOBALS['db']->query("delete from k_evacampaigns_contacts where k_evacampaign_id = '".$campaignObj->id."'"); $GLOBALS['db']->query("delete from k_evacampaigns_leads where k_evacampaign_id = '".$campaignObj->id."'"); $campaignObj->load_relationship('kevacampaigns_contacts_link'); $campaignObj->load_relationship('kevacampaigns_leads_link'); foreach($aRecipientSets as $classObj) { if(is_array($classObj->result->item)) { foreach($classObj->result->item as $item) { $profile_id = $item->items->item[0]->value; $sSql = "select cc.id_c, 'kevacampaigns_contacts_link' rs_name from contacts c, contacts_cstm cc where c.deleted=0 and ". "c.id = cc.id_c and concat(',',cc.k_evalanche_id_c,',') like '%,$profile_id,%' UNION ". "select cc.id_c, 'kevacampaigns_leads_link' rs_name from leads c, leads_cstm cc where c.deleted=0 and ". "c.id = cc.id_c and concat(',',cc.k_evalanche_id_c,',') like '%,$profile_id,%'"; $queryResultCstm = $GLOBALS['db']->query($sSql); if($queryRowCstm = $GLOBALS['db']->fetchByAssoc($queryResultCstm)) { $campaignObj->$queryRowCstm["rs_name"]->add($queryRowCstm["id_c"]); if($openedProfile[$profile_id]>0) { $sSql = "update k_evacampaigns_contacts set opened = ".($openedProfile[$profile_id])." ". "where k_evacampaign_id = '".$campaignObj->id."' and contact_id = '".$queryRowCstm["id_c"]."'"; $GLOBALS['db']->query($sSql); $sSql = "update k_evacampaigns_leads set opened = ".($openedProfile[$profile_id])." ". "where k_evacampaign_id = '".$campaignObj->id."' and lead_id = '".$queryRowCstm["id_c"]."'"; $GLOBALS['db']->query($sSql); } if($unsubProfile[$profile_id]>0) { $GLOBALS['db']->query("update k_evacampaigns_contacts set unsubscribed = ".($unsubProfile[$profile_id])." ". "where k_evacampaign_id = '".$campaignObj->id."' and contact_id = '".$queryRowCstm["id_c"]."'"); $GLOBALS['db']->query("update k_evacampaigns_leads set unsubscribed = ".($unsubProfile[$profile_id])." ". "where k_evacampaign_id = '".$campaignObj->id."' and lead_id = '".$queryRowCstm["id_c"]."'"); } } } } if( (is_object($classObj->result->item)) && (property_exists($classObj->result->item, "items")) && (property_exists($classObj->result->item->items, "item")) && is_array($classObj->result->item->items->item) ) { $profile_id = $classObj->result->item->items->item[0]->value; $sSql = "select cc.id_c, 'kevacampaigns_contacts_link' rs_name from contacts c, contacts_cstm cc where c.deleted=0 and ". "c.id = cc.id_c and concat(',',cc.k_evalanche_id_c,',') like '%,$profile_id,%' UNION ". "select cc.id_c, 'kevacampaigns_leads_link' rs_name from leads c, leads_cstm cc where c.deleted=0 and ". "c.id = cc.id_c and concat(',',cc.k_evalanche_id_c,',') like '%,$profile_id,%'"; $queryResultCstm = $GLOBALS['db']->query($sSql); if($queryRowCstm = $GLOBALS['db']->fetchByAssoc($queryResultCstm)) { $campaignObj->$queryRowCstm["rs_name"]->add($queryRowCstm["id_c"]); if($openedProfile[$profile_id]>0) { $sSql = "update k_evacampaigns_contacts set opened = ".($openedProfile[$profile_id])." ". "where k_evacampaign_id = '".$campaignObj->id."' and contact_id = '".$queryRowCstm["id_c"]."'"; $GLOBALS['db']->query($sSql); $sSql = "update k_evacampaigns_leads set opened = ".($openedProfile[$profile_id])." ". "where k_evacampaign_id = '".$campaignObj->id."' and lead_id = '".$queryRowCstm["id_c"]."'"; $GLOBALS['db']->query($sSql); } if($unsubProfile[$profile_id]>0) { $GLOBALS['db']->query("update k_evacampaigns_contacts set unsubscribed = ".($unsubProfile[$profile_id])." ". "where k_evacampaign_id = '".$campaignObj->id."' and contact_id = '".$queryRowCstm["id_c"]."'"); $GLOBALS['db']->query("update k_evacampaigns_leads set unsubscribed = ".($unsubProfile[$profile_id])." ". "where k_evacampaign_id = '".$campaignObj->id."' and lead_id = '".$queryRowCstm["id_c"]."'"); } } } } } $campaignArticles = Array(); if($sugar_config['K_EvalancheConnector']['Campaigns']['get_article_impressions'] == '1') { $oResponse3 = $oRequest->credaris_127('getArticles', Array($oTypeRecord->id)); if(is_object($oResponse3->item) && $oResponse3->item->article_id) { $oResponse3->item = Array($oResponse3->item); } foreach($oResponse3->item as $articleObj) { if(!($article_id = $articleObj->article_id)) continue; if(!$this->articleRequestEvaObj) { $connParams = $this->aConnectionParams; $connParams['sEndpoint'] = 'Article'; $this->articleRequestEvaObj = new K_EvalancheConnectorSOAP($connParams); } $article_details = $this->articleRequestEvaObj->credaris_127('getById',$article_id); $campaignArticles[$article_id] = Array('name'=>$article_details->name,'url'=>$article_details->url); $oResponse4 = $oRequest->credaris_127('getArticleImpressionProfiles',Array($oTypeRecord->id,$article_id,Array('PROFILEID','EMAIL'))); $aArticleSets = Array(); try { $iLoop = 0; $sTime = time(); while($oResponse4->status < 2 || $oResponse4->status == 3) { $iLoop++; $oResponse4 = $oRequest->oConnection->getJobInformation($oResponse4->id); sleep(1); } if($oResponse4->status == 2) { $oResult = $oRequest->oConnection->getResults($oResponse4->id); $aArticleSets[] = $oResult; $articlesCnt = 0; if($oResult && $oResult->result->item) { $articlesCnt += count($oResult->result->item); } while($oResult->chunks_left > 0) { $oResult = $oRequest->oConnection->getResults($oResponse4->id); $aArticleSets[] = $oResult; if($oResult && $oResult->result->item) { $articlesCnt += count($oResult->result->item); } } } $getArticlesTime = time()-$sTime; $this->updateMessages[] = "$articlesCnt article impressions for &quot;".($article_details->name)."&quot; where $log_status_text SugarCRM in $getArticlesTime secs ".$this->getCampaignLink($campaignObj->id); if($this->enableLogging) $this->oLog->logMessage(Array('status'=>$log_status,'direction'=>'I','text'=>$this->updateMessages[sizeof($this->updateMessages)-1])); $articlesOK = true; } catch (Exception $e) { $logMsg = $e->getMessage(); $this->updateMessages[] = "<b style='color:#f00;'>Couldn't retrieve article impressions for &quot;".($article_details->name)."&quot; - SOAP-Exception: ".$logMsg."</b> ".$this->getCampaignLink($campaignObj->id); if($this->enableLogging) $this->oLog->logMessage(Array('status'=>'E','direction'=>'I','text'=>$this->updateMessages[sizeof($this->updateMessages)-1])); $articlesOK = false; } if($articlesOK) { $campaignArticles[$article_id]["profiles"] = Array(); foreach($aArticleSets as $articleSubObj) { if(is_array($articleSubObj->result->item)) { foreach($articleSubObj->result->item as $item) { $campaignArticles[$article_id]["profiles"][] = Array("id" => $item->items->item[0]->value, "email" => $item->items->item[1]->value); } } if(is_object($articleSubObj->result->item)) { if( (property_exists($articleSubObj->result->item, "items")) && (property_exists($articleSubObj->result->item->items, "item")) && is_array($articleSubObj->result->item->items->item) ) { $campaignArticles[$article_id]["profiles"][] = Array("id" => $articleSubObj->result->item->items->item[0]->value, "email" => $articleSubObj->result->item->items->item[1]->value); } } } } } } if(count($campaignArticles)>0) { $GLOBALS['db']->query("delete from k_evacampaignarticles_contacts where k_evacampaignarticle_id IN ". "(select id from k_evacampaignarticles where k_evacampaign_id = '".$campaignObj->id."')"); $GLOBALS['db']->query("delete from k_evacampaignarticles_leads where k_evacampaignarticle_id IN ". "(select id from k_evacampaignarticles where k_evacampaign_id = '".$campaignObj->id."')"); $GLOBALS['db']->query("delete from k_evacampaignarticles where k_evacampaign_id = '".$campaignObj->id."'"); } foreach($campaignArticles as $article_id => $dataArray) { $queryResult2 = $GLOBALS['db']->query("select id from k_evacampaignarticles where deleted=0 and evalanche_id = ".$article_id); $artObj = new K_EvaCampaignArticle(); if($aRow2 = $GLOBALS['db']->fetchByAssoc($queryResult2)) { $sugar_art_id = $aRow2['id']; $artObj->retrieve($sugar_art_id); } $artObj->name = $dataArray["name"]; $artObj->url = preg_replace('/.*art_resource\.php\?/','/art_resource.php?',$dataArray["url"]); $artObj->evalanche_id = $article_id; $artObj->k_evacampaign_id = $campaignObj->id; $artObj->save(); $artObj->load_relationship('kevacampaignarticles_contacts_link'); $artObj->load_relationship('kevacampaignarticles_leads_link'); if(is_array($dataArray["profiles"])) foreach($dataArray["profiles"] as $contactArray) { $profile_id = $contactArray["id"]; $queryResultCstm = $GLOBALS['db']->query("select cc.id_c, 'kevacampaignarticles_contacts_link' rs_name from contacts c, contacts_cstm cc where c.deleted=0 and ". "c.id = cc.id_c and concat(',',cc.k_evalanche_id_c,',') like '%,$profile_id,%' UNION ". "select cc.id_c, 'kevacampaignarticles_leads_link' rs_name from leads c, leads_cstm cc where c.deleted=0 and ". "c.id = cc.id_c and concat(',',cc.k_evalanche_id_c,',') like '%,$profile_id,%'"); if($queryRowCstm = $GLOBALS['db']->fetchByAssoc($queryResultCstm)) { $artObj->$queryRowCstm["rs_name"]->add($queryRowCstm["id_c"]); } } } } $totalTime = time()-$goTime; $this->updateMessages[] = "campaign &quot;".$campaignObj->name."&quot; was $log_status_text SugarCRM in $totalTime secs ".$this->getCampaignLink($campaignObj->id); if($this->enableLogging) $this->oLog->logMessage(Array('status'=>$log_status,'direction'=>'I','text'=>$this->updateMessages[sizeof($this->updateMessages)-1])); return true; } public function getCampaignLink($sugarID) { return '(<a href="index.php?module=K_EvaCampaigns&action=DetailView&record='.$sugarID.'" target="_blank">'.$sugarID.'</a>)'; } public function credaris_149() { $this->oView->sendToClient(); $aColumns = array(); $aColumns[] = array('sName' => 'No.', 'sKey' => 'no'); $aColumns[] = array('sName' => 'Date', 'sKey' => 'date'); $aColumns[] = array('sName' => 'Destination', 'sKey' => 'link'); $aColumns[] = array('sName' => 'Status', 'sKey' => 'status'); $aColumns[] = array('sName' => 'Info', 'sKey' => 'msg'); $iPage = (isset($_REQUEST['page']) && is_numeric($_REQUEST['page'])) ? $_REQUEST['page'] : 0; $iPage = ($iPage < 1) ? 0 : $iPage; $oHistory = new stdClass(); $oHistory->iRowsPerPage = 1000; $oHistory->iPage = $iPage; $oHistory->sTitle = 'Import-Log'; $oHistory->iRecords = 100000; $oHistory->aGridCols = $aColumns; $oHistory->aGridRows = array(); $iSize = $oHistory->iRowsPerPage; $iOffset = $iPage * $iSize; $sSql = 'SELECT log.*, c.first_name, c.last_name FROM k_evalancheconnector AS log'; $sSql .= ' LEFT JOIN contacts as c ON c.id=log.bean_id'; $sSql .= ' WHERE log.plugin="' . $this->sPluginName . '"'; $sSql .= ' ORDER BY log.syncdate_mt DESC'; $sSql .= ' LIMIT ' . $iOffset . ', ' . $iSize; $queryResult = $GLOBALS['db']->query($sSql); $iLoop = 0; while($aRow = $GLOBALS['db']->fetchByAssoc($queryResult)) { $iLoop++; $aTime = explode('.', $aRow['syncdate_mt']); switch($aRow['status']) { case 'U': $sStatus = 'Update'; $sCss = 'background:#8f8;'; break; case 'C': $sStatus = 'Insert'; $sCss = 'background:#8f8;'; break; case 'W': $sStatus = 'Warning'; $sCss = 'background:#ff8'; break; case 'E': $sStatus = 'Error'; $sCss = 'background:#faa;'; break; case 'D': $sStatus = 'Delimiter'; $sCss = 'background:#6cf;'; break; default: $sStatus = 'Info'; $sCss = ''; break; } $replaceFrom = Array('&lt;','&gt;','&quot;'); $replaceTo = Array('<','>','"'); $aRow['msg'] = str_replace($replaceFrom, $replaceTo, $aRow['msg']); $aRecord = array(); $aRecord['value'] = $aRow; $aRecord['value']['no'] = number_format($aRow['id'], 0, ',', '.'); $aRecord['value']['date'] = date('Y-m-d H:i:s', $aTime[0]); $aRecord['value']['status'] = $sStatus; $aRecord['css'] = $sCss; $oHistory->aGridRows[] = $aRecord; } $this->oView->credaris_149($oHistory); } public function getHeaderToRender() { $sHtml = '<tr><td class="tdHeader">Nr.</td>'; $contacts_titles = Array("MailingID","Name","Subject","Date","URL","Report-URL","Send&nbsp;Start","Send&nbsp;End","Addresses","Recipients", "Duplicate","Blacklist","Hardbounces","Softbounces","Opened","Clicked","Robinson", "Opened(unique)","Clicked(unique)","Unsubscriptions"); foreach($contacts_titles as $con_title) { $sHtml .= '<td class="tdHeader2">' . $con_title . '</td>'; } return $sHtml.'</tr>'; } public function getRenderedURL($url) { $sugar_config = $GLOBALS["sugar_config"]; $href = $sugar_config['K_EvalancheConnector']['Campaigns']['eva_url'].$url; return "<a href=\"$href\" target=\"_blank\">$url</a>"; } }